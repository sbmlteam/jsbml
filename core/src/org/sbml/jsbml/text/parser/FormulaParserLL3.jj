/**
 * JavaCC template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */
options
{
  JDK_VERSION = "1.5";
  DEBUG_PARSER = false;
  static = false;
}

PARSER_BEGIN(FormulaParserLL3)
/*
 * ----------------------------------------------------------------------------
 * This file is part of JSBML. Please visit <http://sbml.org/Software/JSBML>
 * for the latest version of JSBML and more information about SBML.
 *
 * Copyright (C) 2009-2022 jointly by the following organizations:
 * 1. The University of Tuebingen, Germany
 * 2. EMBL European Bioinformatics Institute (EBML-EBI), Hinxton, UK
 * 3. The California Institute of Technology, Pasadena, CA, USA
 * 4. The University of California, San Diego, La Jolla, CA, USA
 * 5. The Babraham Institute, Cambridge, UK 
 *
 * This library is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation. A copy of the license agreement is provided
 * in the file named "LICENSE.txt" included with this software distribution
 * and also available online as <http://sbml.org/Software/JSBML/License>.
 * ----------------------------------------------------------------------------
 */
package org.sbml.jsbml.text.parser;

import java.io.IOException;
import java.util.ArrayList;
import java.util.InvalidPropertiesFormatException;
import java.util.Properties;
import org.sbml.jsbml.ASTNode;
import org.sbml.jsbml.ASTNode.Type;
import org.sbml.jsbml.resources.Resource;
import org.sbml.jsbml.text.parser.IFormulaParser;

/**
 * Parses infix mathematical formula and returns a representation of it as an Abstract Syntax Tree (AST).
 * 
 * <p>
 * Support almost the same syntax as defined in <a href="http://sbml.org/Software/libSBML/docs/java-api/org/sbml/libsbml/libsbml.html#parseL3Formula(java.lang.String)">
 * the LibSBML L3 parser</a>. The things not supported for now are the units associated with numbers.
 *
 * <p>
 * Parsing of the various MathML functions and constants are all
 * case-sensitive by default: names such as 
 * <code>Cos</code> and <code>COS</code> are not parsed as the MathML cosine
 * operator, <code>&lt;cos&gt;</code>.
 *
 * <p> You can change this behaviour by using the {@link #setCaseSensitive(boolean)}
 * method.
 *
 *
 * <p>
 * <table border="0" width="95%"
       class="centered text-table normal-font alt-row-colors"
       style="padding-bottom: 0.5em">
 <tr style="background: lightgray; font-size: 14px;">
     <th align="left">Token</th>
     <th align="left">Operation</th>
     <th align="left">Class</th>
     <th>Precedence</th>
     <th align="left">Associates</th>
 </tr>
<tr><td><em>name</em></td><td>symbol reference</td><td>operand</td><td align="center">8</td><td>n/a</td></tr>
<tr><td><code>(</code><em>expression</em><code>)</code></td><td>expression grouping</td><td>operand</td><td align="center">8</td><td>n/a</td></tr>
<tr><td><code>f(</code><em>...</em><code>)</code></td><td>function call</td><td>prefix</td><td align="center">8</td><td>left</td></tr>
<tr><td><code>^</code></td><td>power</td><td>binary</td><td align="center">7</td><td>left</td></tr>
<tr><td><code>-, !</code></td><td>negation and boolean 'not'</td><td>unary</td><td align="center">6</td><td>right</td></tr>
<tr><td><code>*, /, %</code></td><td>multiplication, division, and modulo</td><td>binary</td><td align="center">5</td><td>left</td></tr>
<tr><td><code>+, -</code></td><td>addition and subtraction</td><td>binary</td><td align="center">4</td><td>left</td></tr>
<tr><td><code>==, &lt;, &gt;, &lt;=, &gt;=, !=</code></td><td>boolean equality, inequality, and comparison</td><td>binary</td><td align="center">3</td><td>left</td></tr>
<tr><td><code>&amp;&amp;, ||</code></td><td>boolean 'and' and 'or'</td><td>binary</td><td align="center">2</td><td>left</td></tr>
<tr><td><code>,</code></td><td>argument delimiter</td><td>binary</td><td align="center">1</td><td>left</td></tr>

<caption class="top-caption">Expression operators and their precedence in the
 text-string format for mathematical expressions.
</caption>
</table>


 <p>
 * In the table above, <em>operand</em> implies the construct is an operand, 
 * <em>prefix</em> implies the operation is applied to the following arguments, 
 * <em>unary</em> implies there is one argument, and <em>binary</em> implies there are
 * two arguments.  The values in the <b>Precedence</b> column show how the
 * order of different types of operation are determined.  For example, the
 * expression <code>a + b * c</code> is evaluated as <code>a + (b * c)</code>
 * because the @c * operator has higher precedence.  The
 * <b>Associates</b> column shows how the order of similar precedence
 * operations is determined; for example, <code>a &amp;&amp; b || c</code> is
 * evaluated as <code>(a &amp;&amp; b) || c</code> because the <code>&amp;&amp;</code> and <code>||</code>
 * operators are left-associative and have the same precedence.
 <p>
 * The function call syntax consists of a function name, followed by an opening parenthesis token,
 * followed by a sequence of zero or more arguments separated by commas (with each comma
 * optionally preceded and/or followed by zero or more white space
 * characters), followed by a closing parenthesis token.  The function name
 * must be chosen from one of the pre-defined functions in SBML or a
 * user-defined function in the model.  The following table lists the names
 * of certain common mathematical functions; this table corresponds to
 * Table&nbsp;6 in the <a target='_blank'
 * href='http://sbml.org/Documents/Specifications#SBML_Level_1_Version_2'>SBML
 * Level&nbsp;1 Version&nbsp;2 specification</a> with additions based on the
 * functions added in SBML Level 2 and Level 3:
 <p>

  * <table border="0" width="95%" 
       class="centered text-table normal-font alt-row-colors">
 <tr>
     <th align="left" width="60">Name</th>
     <th align="left" width="75">Argument(s)</th>
     <th align="left">Formula or meaning</th>
     <th align="left" width="90">Argument Constraints</th>
     <th align="left" width="90">Result constraints</th>
 </tr>
<tr><td><code>abs</code></td>   
    <td><em>x</em></td> 
    <td>Absolute value of <em>x</em>.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>acos</code>, <code>arccos</code></td>
    <td><em>x</em></td>
    <td>Arccosine of <em>x</em> in radians.</td>
    <td>&ndash;1.0 &le; <em>x</em> &le; 1.0</td>
    <td>0 &le; <em>acos(x)</em> &le; &pi;</td>
</tr>
<tr><td><code>acosh</code>, <code>arccosh</code></td>
    <td><em>x</em></td>
    <td>Hyperbolic arccosine of <em>x</em> in radians.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>acot</code>, <code>arccot</code></td>
    <td><em>x</em></td>
    <td>Arccotangent of <em>x</em> in radians.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>acoth</code>, <code>arccoth</code></td>
    <td><em>x</em></td>
    <td>Hyperbolic arccotangent of <em>x</em> in radians.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>acsc</code>, <code>arccsc</code></td>
    <td><em>x</em></td>
    <td>Arccosecant of <em>x</em> in radians.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>acsch</code>, <code>arccsch</code></td>
    <td><em>x</em></td>
    <td>Hyperbolic arccosecant of <em>x</em> in radians.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>asec</code>, <code>arcsec</code></td>
    <td><em>x</em></td>
    <td>Arcsecant of <em>x</em> in radians.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>asech</code>, <code>arcsech</code></td>
    <td><em>x</em></td>
    <td>Hyperbolic arcsecant of <em>x</em> in radians.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>asin</code>, <code>arcsin</code></td>
    <td><em>x</em></td><td>Arcsine of <em>x</em> in radians.</td>
    <td>&ndash;1.0 &le; <em>x</em> &le; 1.0</td>
    <td>0 &le; <em>asin(x)</em> &le; &pi;</td>
</tr>
<tr><td><code>atan</code>, <code>arctan</code></td>
    <td><em>x</em></td>
    <td>Arctangent of <em>x</em> in radians.</td>
    <td></td>
    <td>0 &le; <em>atan(x)</em> &le; &pi;</td>
</tr>
<tr><td><code>atanh</code>, <code>arctanh</code></td>
    <td><em>x</em></td>
    <td>Hyperbolic arctangent of <em>x</em> in radians.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>ceil</code>, <code>ceiling</code></td>
    <td><em>x</em></td>
    <td>Smallest number not less than <em>x</em> whose value is an exact integer.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>cos</code></td>
    <td><em>x</em></td>
    <td>Cosine of <em>x</em></td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>cosh</code></td>
    <td><em>x</em></td>
    <td>Hyperbolic cosine of <em>x</em>.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>cot</code></td>
    <td><em>x</em></td>
    <td>Cotangent of <em>x</em>.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>coth</code></td>
    <td><em>x</em></td>
    <td>Hyperbolic cotangent of <em>x</em>.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>csc</code></td>
    <td><em>x</em></td>
    <td>Cosecant of <em>x</em>.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>csch</code></td>
    <td><em>x</em></td>
    <td>Hyperbolic cosecant of <em>x</em>.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>delay</code></td>
    <td><em>x, y</em></td>
    <td>The value of <em>x</em> at <em>y</em> time units in the past.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>factorial</code></td>
    <td><em>n</em></td>
    <td>The factorial of <em>n</em>. Factorials are defined by <em>n! = n*(n&ndash;1)* ... * 1</em>.</td>
    <td><em>n</em> must be an integer.</td>
    <td></td>
</tr>
<tr><td><code>exp</code></td>
    <td><em>x</em></td>
    <td><em>e</em><sup><em> x</em></sup>, where <em>e</em> is the base of the natural logarithm.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>floor</code></td>
    <td><em>x</em></td>
    <td>The largest number not greater than <em>x</em> whose value is an exact integer.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>ln</code></td>
    <td><em>x</em></td>
    <td>Natural logarithm of <em>x</em>.</td>
    <td><em>x</em> &gt; 0</td>
    <td></td>
</tr>
<tr><td><code>log</code></td>
    <td><em>x</em></td>
    <td>By default, the base 10 logarithm of <em>x</em>, but can be set to be the natural logarithm of <em>x</em>, or to be an illegal construct.</td>
    <td><em>x</em> &gt; 0</td>
    <td></td>
</tr>
<tr><td><code>log</code></td>
    <td><em>x, y</em></td>
    <td>The base <em>x</em> logarithm of <em>y</em>.</td>
    <td><em>y</em> &gt; 0</td>
    <td></td>
</tr>
<tr><td><code>log10</code></td>
    <td><em>x</em></td>
    <td>Base 10 logarithm of <em>x</em>.</td>
    <td><em>x</em> &gt; 0</td>
    <td></td>
</tr>
<tr><td><code>piecewise</code></td>
    <td><em>x1, y1, [x2, y2,] [...] [z]</em></td>
    <td>A piecewise function: if (<em>y1</em>), <em>x1</em>.  Otherwise, if (<em>y2</em>), <em>x2</em>, etc.  Otherwise, z. </td>
    <td><em>y1, y2, y3 [etc]</em> must be boolean</td>
    <td></td>
</tr>
<tr><td><code>pow</code>, <code>power</code> </td>
    <td><em>x, y</em></td>
    <td><em>x</em><sup><em> y</em></sup>.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>root</code></td>
    <td><em>b, x</em></td>
    <td>The root base <em>b</em> of <em>x</em>.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>sec</code></td>
    <td><em>x</em></td>
    <td>Secant of <em>x</em>.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>sech</code></td>
    <td><em>x</em></td>
    <td>Hyperbolic secant of <em>x</em>.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>sqr</code></td>
    <td><em>x</em></td>
    <td><em>x</em><sup><em>2</em></sup>.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>sqrt</code></td>
    <td><em>x</em></td>
    <td>&radic;<em>x</em>.</td>
    <td><em>x</em> &gt; 0</td>
    <td><em>sqrt(x)</em> &ge; 0</td>
</tr>
<tr><td><code>sin</code></td>
    <td><em>x</em></td>
    <td>Sine of <em>x</em>.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>sinh</code></td>
    <td><em>x</em></td>
    <td>Hyperbolic sine of <em>x</em>.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>tan</code></td>
    <td><em>x</em></td>
    <td>Tangent of <em>x</em>.</td>
    <td>x &ne; n*&pi;/2, for odd integer <em>n</em></td>
    <td></td>
</tr>
<tr><td><code>tanh</code></td>
    <td><em>x</em></td>
    <td>Hyperbolic tangent of <em>x</em>.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>and</code></td>
    <td><em>x, y, z...</em></td>
    <td>Boolean <em>and(x, y, z...)</em>: returns <code>true</code> if all of its arguments are true.  Note that <code>and</code> is an n-ary function, taking 0 or more arguments, and that <code>and()</code> returns <code>true</code>.</td>
    <td>All arguments must be boolean</td>
    <td></td>
</tr>
<tr><td><code>not</code></td>
    <td><em>x</em></td>
    <td>Boolean <em>not(x)</em></td>
    <td><em>x</em> must be boolean</td>
    <td></td>
</tr>
<tr><td><code>or</code></td>
    <td><em>x, y, z...</em></td>
    <td>Boolean <em>or(x, y, z...)</em>: returns <code>true</code> if at least one of its arguments is true.  Note that <code>or</code> is an n-ary function, taking 0 or more arguments, and that <code>or()</code> returns <code>false</code>.</td>
    <td>All arguments must be boolean</td>
    <td></td>
</tr>
<tr><td><code>xor</code></td>
    <td><em>x, y, z...</em></td>
    <td>Boolean <em>xor(x, y, z...)</em>: returns <code>true</code> if an odd number of its arguments is true.  Note that <code>xor</code> is an n-ary function, taking 0 or more arguments, and that <code>xor()</code> returns <code>false</code>.</td>
    <td>All arguments must be boolean</td>
    <td></td>
</tr>
<tr><td><code>eq</code></td>
    <td><em>x, y, z...</em></td>
    <td>Boolean <em>eq(x, y, z...)</em>: returns <code>true</code> if all arguments are equal.  Note that <code>eq</code> is an n-ary function, but must take 2 or more arguments.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>geq</code></td>
    <td><em>x, y, z...</em></td>
    <td>Boolean <em>geq(x, y, z...)</em>: returns <code>true</code> if each argument is greater than or equal to the argument following it.  Note that <code>geq</code> is an n-ary function, but must take 2 or more arguments.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>gt</code></td>
    <td><em>x, y, z...</em></td>
    <td>Boolean <em>gt(x, y, z...)</em>: returns <code>true</code> if each argument is greater than the argument following it.  Note that <code>gt</code> is an n-ary function, but must take 2 or more arguments.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>leq</code></td>
    <td><em>x, y, z...</em></td>
    <td>Boolean <em>leq(x, y, z...)</em>: returns <code>true</code> if each argument is less than or equal to the argument following it.  Note that <code>leq</code> is an n-ary function, but must take 2 or more arguments.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>lt</code></td>
    <td><em>x, y, z...</em></td>
    <td>Boolean <em>lt(x, y, z...)</em>: returns <code>true</code> if each argument is less than the argument following it.  Note that <code>lt</code> is an n-ary function, but must take 2 or more arguments.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>neq</code></td>
    <td><em>x, y</em></td>
    <td>Boolean <em>x</em> != <em>y</em>: returns <code>true</code> unless x and y are equal.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>plus</code></td>
    <td><em>x, y, z...</em></td>
    <td><em>x</em> + <em>y</em> + <em>z</em> + <em>...</em>: The sum of the arguments of the function.  Note that <code>plus</code> is an n-ary function taking 0 or more arguments, and that <code>plus()</code> returns <code>0</code>.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>times</code></td>
    <td><em>x, y, z...</em></td>
    <td><em>x</em> * <em>y</em> * <em>z</em> * <em>...</em>: The product of the arguments of the function.  Note that <code>times</code> is an n-ary function taking 0 or more arguments, and that <code>times()</code> returns <code>1</code>.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>minus</code></td>
    <td><em>x, y</em></td>
    <td><em>x</em> &ndash; <em>y</em>.</td>
    <td></td>
    <td></td>
</tr>
<tr><td><code>divide</code></td>
    <td><em>x, y</em></td>
    <td><em>x</em> / <em>y</em>.</td>
    <td></td>
    <td></td>
</tr>

<caption class="top-caption">Mathematical functions defined
in the text-string formula syntax.</caption>

</table>


 *
 *
 *
 * @author Alexander D&ouml;rr
 * @author Nicolas Rodriguez
 * @since 1.0
 */
public class FormulaParserLL3 implements IFormulaParser
{

  public static Properties stringToType = new Properties();

  /**
   * indicates if we will ignore case or not when trying to find mathml operators.
   */
  private boolean ignoreCase = false;

  /**
   * the SBML level for which we build the ASTNode.
   */
  private int sbmlLevel = -1;
  
  /**
   * the SBML version for which we build the ASTNode.
   */
  private int sbmlVersion = -1;
    
  /**
   * Defines the different behaviors the parser can have regarding the 'log' operator.
   * 
   * <p>By default, it will be read as the natural logarithm 'ln' as it was defined 
   * in SBML Level 1, Appendix C, table 6.</p>
   * 
   * @author rodrigue
   *
   */
  public static enum LOG_BEHAVIOR {
    /**
     * 'log' is interpreted as the natural logarithm 'ln' as it was defined 
   * in SBML Level 1, Appendix C, table 6. This is the default value.
     */
    LOG_IS_LN,
    /**
     * 'log(x)' is interpreted as 'log10(x)' or 'log(10, x)'
     */
    LOG_IS_LOG10,
    /**
     * 'log(x)' is interpreted as 'log(2, x)'
     */
    LOG_IS_LOG2,
    /**
     * 'log(x)' is not allowed and a {@link ParseException} will be returned if it is encountered. 'log(b, x)'
     * and 'ln(x)' are still allowed.
     */
    LOG_IS_NOT_ALLOWED
  };
  
  /**
   * indicates how to parse the 'log' operator when it has one argument.
   */
  private static LOG_BEHAVIOR logBehavior = LOG_BEHAVIOR.LOG_IS_LN;
  

  static
  {	  
    String path = "cfg/ASTNodeTokens.xml";
    try
    {
      stringToType.loadFromXML(Resource.class.getResourceAsStream(path));
    }
    catch (InvalidPropertiesFormatException e)
    {
      throw new RuntimeException("Invalid configuration file entries in file " + Resource.class.getResource(path), e);
    }
    catch (IOException e)
    {
      throw new RuntimeException("Could not read configuration file " + Resource.class.getResource(path), e);
    }
  } 

  /**
   * Returns the case sensitivity of the parser, for the mathml elements.
   *
   * <p>The default behavior is to be case sensitive, meaning
   * '{@code cos}' would be recognized as the mathematical <a href="http://www.w3.org/TR/MathML2/chapter4.html#contm.trig">cosinus</a> but
   * '{@code Cos}', '{@code cOs}' or any other alternatives would be recognized 
   * as a name and read as a 'ci' element. If you pass {@code false} to the method {@link #setCaseSensitive(boolean)}
   * all the different versions of {@code cos} would be recognized  as the mathematical
   * <a href="http://www.w3.org/TR/MathML2/chapter4.html#contm.trig">cosinus</a>.  
   *
   */
  public boolean getCaseSensitive()
  {
        return ignoreCase;
  }

  /**
   * Sets the case sensitivity of the parser, for the mathml elements.
   *
   * <p>The default behavior is to be case sensitive, meaning
   * '{@code cos}' would be recognized as the mathematical <a href="http://www.w3.org/TR/MathML2/chapter4.html#contm.trig">cosinus</a> but
   * '{@code Cos}', '{@code cOs}' or any other alternatives would be recognized 
   * as a name and read as a 'ci' element. If you pass {@code false} to this method
   * all the different versions of {@code cos} would be recognized  as the mathematical
   * <a href="http://www.w3.org/TR/MathML2/chapter4.html#contm.trig">cosinus</a>.  
   *
   * @param caseSensitive boolean to define if the parser should be case sensitive or not. 
   */
  public void setCaseSensitive(boolean caseSensitive)
  {
	ignoreCase = !caseSensitive;
  }
  
  /**
   * Returns the parser behavior when encountering the 'log' operator with one argument.
   *
   */
  public LOG_BEHAVIOR getLogBehavior()
  {
        return logBehavior;
  }

  /**
   * Sets the parser behavior when encountering the 'log' operator with one argument.
   *
   * @param newLogBehavior {@link LOG_BEHAVIOR} value to define what the parser should do when encountering the 'log' operator. 
   */
  public void setLogBehavior(LOG_BEHAVIOR newLogBehavior)
  {
        logBehavior = newLogBehavior;
  }

  /**
   * Returns the SBML Level.
   * 
   * <p>Returns -1 if it is not set.</p>
   * 
   * @return the SBML Level.
   * @see #getVersion()
   */
  public int getLevel() {
    return sbmlLevel;
  }
  
  /**
   * Sets the SBML Level.
   * 
   * @param level the SBML Level.
   */
  public void setLevel(int level) {
    sbmlLevel = level;
  }
  
  /**
   * Returns the SBML Version.
   * 
   * <p>Returns -1 if it is not set.</p>
   * 
   * @return the SBML Version.
   * @see #getVersion()
   */
  public int getVersion() {
    return sbmlVersion;
  }

  /**
   * Sets the SBML Version.
   * 
   * @param version the SBML Version.
   */
  public void setVersion(int version) {
    sbmlVersion = version;
  }
  
  private void checkSize(ArrayList < ASTNode > arguments, int i) throws ParseException
  {
    if (arguments.size() > i)
    {
      throw new ParseException();
    }
  }

  private Integer getInteger(ASTNode node)
  {
    if (node.isUMinus())
    {
      if (node.getChild(0).isInteger())
      {
        return - node.getChild(0).getInteger();
      }
      else
      {
        return null;
      }
    }
    else
    {
      if (node.isInteger())
      {
        return node.getInteger();
      }
      else
      {
        return null;
      }
    }
  }

  /**
   * Returns a piecewise {@link ASTNode} representing the modulo operation between the left and right child given.
   *
   * <p/> The formula produced for 'a % b' or modulo(a, b) is 'piecewise(a - b * ceil(a/b), xor((a < 0), (b < 0)), a - b * floor(a/b))'
   *
   * @param leftChild
   * @param rightChild
   * @return a piecewise {@link ASTNode} representing the modulo operation between the left and right child given.
   * 
   */
  private ASTNode createModulo(ASTNode leftChild, ASTNode rightChild)
  {
    if (getLevel() >= 3 && getVersion() >= 2) 
    {
      // In this case, use the new 'rem' math operator
      ASTNode moduloNode = new ASTNode(ASTNode.Type.FUNCTION_REM);
      
      moduloNode.addChild(leftChild);
      moduloNode.addChild(rightChild);
      
      return moduloNode;
    }
    
    ASTNode piecewiseNode = new ASTNode(ASTNode.Type.FUNCTION_PIECEWISE);

    ASTNode aDividedByB = new ASTNode(ASTNode.Type.DIVIDE);
    aDividedByB.addChild(leftChild);
    aDividedByB.addChild(rightChild);

    // a - b * ceil(a/b)
    ASTNode ceilNode = new ASTNode(ASTNode.Type.FUNCTION_CEILING);
    ceilNode.addChild(aDividedByB);
    ASTNode rightTimesCeil = new ASTNode(ASTNode.Type.TIMES);
    rightTimesCeil.addChild(rightChild);
    rightTimesCeil.addChild(ceilNode);
    
    ASTNode minusNode1 = new ASTNode(ASTNode.Type.MINUS);
    minusNode1.addChild(leftChild);
    minusNode1.addChild(rightTimesCeil);
    
    piecewiseNode.addChild(minusNode1);
    
    // xor((a < 0), (b < 0))
    ASTNode lowerThanZeroLeft = new ASTNode(ASTNode.Type.RELATIONAL_LT);
    lowerThanZeroLeft.addChild(leftChild);
    lowerThanZeroLeft.addChild(new ASTNode(0));

    ASTNode lowerThanZeroRight = new ASTNode(ASTNode.Type.RELATIONAL_LT);
    lowerThanZeroRight.addChild(rightChild);
    lowerThanZeroRight.addChild(new ASTNode(0));

    ASTNode xorNode = new ASTNode(ASTNode.Type.LOGICAL_XOR);
    xorNode.addChild(lowerThanZeroLeft);
    xorNode.addChild(lowerThanZeroRight);
    
    piecewiseNode.addChild(xorNode);

    // a - b * floor(a/b)
    ASTNode floorNode = new ASTNode(ASTNode.Type.FUNCTION_FLOOR);
    floorNode.addChild(aDividedByB.clone());

    ASTNode rightTimesFloor = new ASTNode(ASTNode.Type.TIMES);
    rightTimesFloor.addChild(rightChild);
    rightTimesFloor.addChild(floorNode);
    
    ASTNode minusNode2 = new ASTNode(ASTNode.Type.MINUS);
    minusNode2.addChild(leftChild);
    minusNode2.addChild(rightTimesFloor);
    
    piecewiseNode.addChild(minusNode2);


    return piecewiseNode;  
  }    


  private boolean compareString(String str1, String str2)  {	if (ignoreCase)	{		return str1.equalsIgnoreCase(str2);
	}
	else
	{		return str1.equals(str2);
	}
  }
}

PARSER_END(FormulaParserLL3)


SKIP :
{
  " "
| "\t"
}



TOKEN :
{
  < INTEGER : (< DIGIT >)+ >
}
TOKEN :
{
  < DIGIT : [ "0"-"9" ] >
}


TOKEN :
{
  < NUMBER :
    (< DIGIT >)+
    (
      "." (< DIGIT >)+
    )?
  | "." (< DIGIT >)+ >
}

TOKEN :
{
  < EXPNUMBER :  < NUMBER > [ "E", "e" ] ([ "+", "-" ])? < INTEGER > >
}

TOKEN :
{
  < SPLITTER : [ "," ] >
}

TOKEN :
{
  < PLUS : "+" >
}

TOKEN :
{
  < POWER : "^" >
}

TOKEN :
{
  < MINUS : "-" >
}

TOKEN :
{
  < TIMES : "*" >
}

TOKEN :
{
  < DIVIDE : "/" >
}

/*
// removed to support the boolean NOT as !
TOKEN :
{
  < FACTORIAL : "!" >
}
*/

TOKEN :
{
  < MODULO : "%" >
}

TOKEN :
{
  < OPEN_PAR : "(" >
}

TOKEN :
{
  < CLOSE_PAR : ")" >
}

TOKEN :
{
  < LEFT_BRACES : "{" >
}

TOKEN :
{
  < RIGHT_BRACES : "}" >
}

TOKEN :
{
  < LEFT_BRACKET : "[" >
}

TOKEN :
{
  < RIGHT_BRACKET : "]" >
}

TOKEN :
{
  < COMPARISON :
	  "<"
	| "<="
	| ">"
	| ">="
	| "=="
	| "!=" >
}

TOKEN :
{
  < BOOLEAN_LOGIC :
    < AND >
  | < OR >
  | < XOR > >
}

TOKEN :
{
  < AND :
    "And"
  | "AND"
  | "&&" >
}
/*    "and"
  | "or"
    "not"
  | "xor"
    removed to support or(true, false)
 */

TOKEN :
{
  < OR :
    "OR"
  | "Or"
  | "||" >
}

TOKEN :
{
  < XOR :
    "XOR"
  | "Xor" >
}

TOKEN :
{
  < NOT :
    "NOT"
  | "Not"
  | "!" >
}

TOKEN :
{
  < LOG : "log" >
}

TOKEN :
{
  < STRING : (< LETTER > | [ "_" ] )+ (< IDCHAR >)*>
}

TOKEN :
{
	< IDCHAR : < LETTER > | < DIGIT > | "_" >
}

TOKEN :
{
	< LETTER : [ "a"-"z", "A"-"Z" ]>
}

Token string() :
{
  Token t;
}
{
  (
    t = < LOG >
  | t = < STRING >
  )
  {
    return t;
  }
}

TOKEN :
{
  < EOL :
    "\n"
  | "\r" >
}

public ASTNode parse() :
{
  ASTNode node = null;
}
{
  node = expression()
  {
    return node;
  }
}

private ASTNode expression() :
{
  ASTNode value = null;
}
{
  value = termLevel2()
  (
    < EOF >
  | < EOL >
  )
  {
    return value;
  }
}


private ASTNode termLevel2() :
{
  ASTNode rightChild = null;
  ASTNode leftChild;
  ASTNode node = null;
  Token t;
}
{  
  leftChild = termLevel3()
  ( t = < BOOLEAN_LOGIC > rightChild = termLevel3()
    {
      // TODO - do we want to ignore the case for those cases ? 
      String s = t.image;
      Type type = null; // ASTNode.Type.valueOf(stringToType.getProperty(s.toLowerCase()).toUpperCase());

      if (s.equalsIgnoreCase("or") || s.equalsIgnoreCase("||"))
      {
        type = ASTNode.Type.LOGICAL_OR;
      }
      else if (s.equalsIgnoreCase("and") || s.equalsIgnoreCase("&&"))
      {
        type = ASTNode.Type.LOGICAL_AND;
      }
      else if (s.equalsIgnoreCase("xor"))
      {
        type = ASTNode.Type.LOGICAL_XOR;
      }
      
      node = new ASTNode(type); // TODO - those elements can have more children
      node.addChild(leftChild);
      node.addChild(rightChild);
      leftChild = node;
    }
  )*
  {
	return leftChild;
  }
}


private ASTNode termLevel3() :
{
  ASTNode rightChild = null;
  ASTNode leftChild;
  ASTNode node = null;
  Token t;
}
{  
  leftChild = termLevel4()
  ( t = < COMPARISON > rightChild = termLevel4()
    {
      String s = t.image;
      Type type = null;
      
      if (s.equalsIgnoreCase("<"))
      {
        type = ASTNode.Type.RELATIONAL_LT;
      }
      else if (s.equalsIgnoreCase(">"))
      {
        type = ASTNode.Type.RELATIONAL_GT;
      }
      else if (s.equalsIgnoreCase("=="))
      {
        type = ASTNode.Type.RELATIONAL_EQ;
      }
      else if (s.equalsIgnoreCase("!="))
      {
        type = ASTNode.Type.RELATIONAL_NEQ;
      }
      else if (s.equalsIgnoreCase(">="))
      {
        type = ASTNode.Type.RELATIONAL_GEQ;
      }
      else if (s.equalsIgnoreCase("<="))
      {
        type = ASTNode.Type.RELATIONAL_LEQ;
      }
      node = new ASTNode(type);
      node.addChild(leftChild);
      node.addChild(rightChild);
      leftChild = node;
    }
  )*
  {
	return leftChild;
  }
}



private ASTNode termLevel4() :
{
  ASTNode rightChild = null;
  ASTNode leftChild;
  ASTNode node = null;
}
{  
  leftChild = termLevel5()
  (
    < PLUS > rightChild = termLevel5()
    {
      node = new ASTNode('+');
      node.addChild(leftChild);
      node.addChild(rightChild);
      leftChild = node;
    }
  | < MINUS > rightChild = termLevel5()
    {
      node = new ASTNode('-');
      node.addChild(leftChild);
      node.addChild(rightChild);
      leftChild = node;
    }
  )*
  {
	return leftChild;
  }
}

private ASTNode termLevel5() :
{
  ASTNode rightChild = null;
  ASTNode leftChild;
  ASTNode node = null;
}
{
  leftChild = termLevel6()
  (
    < TIMES > rightChild = termLevel6()
    {
      node = new ASTNode('*');
      node.addChild(leftChild);
      node.addChild(rightChild);
      leftChild = node;
    }
  | < DIVIDE > rightChild = termLevel6()
    {
      Integer left, right;
      left = getInteger(leftChild);
      right = getInteger(rightChild);
      // TODO - check if libsbml behave the same way
      if (left != null && right != null) // Node transformed into a ASTNode.Type.RATIONAL number if both left and right are integer      
      {
        node = new ASTNode();
        node.setValue(left, right);
        leftChild = node;
      }
      else
      {
        node = new ASTNode('/');
        node.addChild(leftChild);
        node.addChild(rightChild);
        leftChild = node;
      }
    }    
  | < MODULO > rightChild = termLevel6()
    {
      node = createModulo(leftChild, rightChild);
      leftChild = node;
    }
  )*
  {
    return leftChild;
  }
}

private ASTNode termLevel6() :
{
  ASTNode node = null;
}
{
  < MINUS > node = termLevel7()
  {
    ASTNode uiMinus = new ASTNode('-');
    uiMinus.addChild(node);
    return uiMinus;
  }
| < PLUS > node = termLevel7()
  {
    return node;
  }  
| < NOT > node = termLevel7()
  {
    ASTNode not = new ASTNode(Type.LOGICAL_NOT);
    not.addChild(node);
    return not;
  }
| node = termLevel7()
  {
    return node;
  }
}

private ASTNode termLevel7() :
{
  ASTNode rightChild;
  ASTNode leftChild;
  ASTNode node = null;
}
{
  leftChild = termLevel8()
  (
    < POWER > rightChild = termLevel8()
    {
      node = new ASTNode(Type.POWER);
      node.addChild(leftChild);
      node.addChild(rightChild);
      leftChild = node;
    }
  )*
  {
    return leftChild;
  }
}


private ASTNode termLevel8() throws NumberFormatException :
{
  Token t;
  double d;
  int i;
  ASTNode node = new ASTNode();
  ASTNode vector = null;
  ASTNode child, furtherChild;
  String s;
  String vals [ ];
  ArrayList < ASTNode > arguments = new ArrayList < ASTNode > ();
}
{
  t = < INTEGER >
  {
    try {
      i = Integer.parseInt(t.image); // Could use StringTools.parseXXX methods here but not doing so allow to support different locale ??
      node.setValue(i);
    } catch (NumberFormatException e) {
      // it could happen that the number is too big to be stored in an Integer
      d = Double.parseDouble(t.image);
      node.setValue(d);
    }
    
    return node;
  }
| t = < NUMBER >
  {
    d = Double.parseDouble(t.image);
    node.setValue(d);
    return node;
  }
| t = < EXPNUMBER >
  {
    s = t.image;
    vals = s.toLowerCase().split("e");
    if (vals [ 1 ].startsWith("+"))
    {
      i = Integer.parseInt(vals [ 1 ].substring(1));
    }
    else
    {
      i = Integer.parseInt(vals [ 1 ]);
    }
    node.setValue(Double.parseDouble(vals [ 0 ]), i);
    return node;
  }
// Function call: f(...)
| LOOKAHEAD(2)
  t = string() < OPEN_PAR > child = termLevel2() // TODO - we need to support function without arguments
  (
    < SPLITTER > furtherChild = termLevel2()
    {
      arguments.add(furtherChild);
    }
  )*
  < CLOSE_PAR >
  {
    s = t.image;
    Type type = null;
    if (ignoreCase)
    {
      s = s.toLowerCase();
    }
    if (stringToType.containsKey(s))
    {
      type = ASTNode.Type.valueOf(stringToType.getProperty(s.toLowerCase()).toUpperCase()); // TODO - can we get rid of the '.toLowerCase()' and .toUpperCase() here !
      node.setType(type);
      
      node.addChild(child);
    }
    else if (s.equals("modulo") || s.equals("mod"))
    {
      checkSize(arguments, 1);
      ASTNode rightChild = arguments.get(0);
      arguments.clear();
      node = createModulo(child, rightChild);
      return node;
    }
    else if (s.equals("piecewise"))
    {
      type = ASTNode.Type.FUNCTION_PIECEWISE;
      node.setType(ASTNode.Type.FUNCTION_PIECEWISE); // TODO - we don't create the CONSTRUCTOR_PIECE node in this .jj, I think
      node.addChild(child);  // TODO - write all the children here and create the CONSTRUCTOR_PIECE and other new node ?
    }
    else
    {      
      node.setType(Type.FUNCTION);
      node.addChild(child);
    }
    if (type != null)
    {
      // node.setType(type);
      // TODO - should we set the name of the ASTNode for FUNCTION, ...
    }
    else
    {
      node.setName(s);
    }
    
    for (ASTNode argument : arguments)
    {
      node.addChild(argument);
    }
    
    // add a special case for FUNTION_LN => transform it into FUNCTION_LOG if it has 2 arguments
    if (node.getType().equals(ASTNode.Type.FUNCTION_LN) && node.getChildCount() > 1) {
      node.setType(ASTNode.Type.FUNCTION_LOG);
    }
    else if (s.equals("log")) {
      // special case for 'log' with one argument
      if (logBehavior == LOG_BEHAVIOR.LOG_IS_LOG10) {
        node.setType(ASTNode.Type.FUNCTION_LOG);  
      } else if (logBehavior == LOG_BEHAVIOR.LOG_IS_LOG2) {
        node.setType(ASTNode.Type.FUNCTION_LOG);
        node.insertChild(0, new ASTNode(2));
      } else if (logBehavior == LOG_BEHAVIOR.LOG_IS_NOT_ALLOWED) {
        throw new ParseException("The 'log(x)' operator is not allowed, please use 'ln(x)', 'log10(x)' or log(base, x).");
      }
    }
    
    return node;
  }
  // (expression)
| < OPEN_PAR > node = termLevel2() < CLOSE_PAR >
  {
    return node;
  }
  // arrays selector: x[i][j]...
| LOOKAHEAD(4)
  t = < STRING >
  {
    ASTNode selector = new ASTNode();
    selector.setType(ASTNode.Type.FUNCTION_SELECTOR);
    selector.addChild(new ASTNode(t.image));
  }
  (
    < LEFT_BRACKET >
    (
      node = termLevel2()
    )
    {
      selector.addChild(node);
    }
    < RIGHT_BRACKET >
  )+
  {
    return selector;
  }
  // vector/array declaration: {1, 2, 3}  or vector declaration and selector: {1, 2, 3}[2]  
| LOOKAHEAD(2)
  < LEFT_BRACES > node = termLevel2()
  {
    ASTNode selector = new ASTNode();
    vector = new ASTNode();
    boolean isSelector = false;
    selector.setType(ASTNode.Type.FUNCTION_SELECTOR);
    vector.setType(ASTNode.Type.VECTOR);
    vector.addChild(node);
  }
  (
    < SPLITTER > node = termLevel2()
    {
      vector.addChild(node);
    }
  )*
  < RIGHT_BRACES >
  {
    selector.addChild(vector);
  }
  (
    < LEFT_BRACKET >
    (
      node = termLevel2()
    )
    {
      isSelector = true;
      selector.addChild(node);
    }
    < RIGHT_BRACKET >
  )*
  {
    return isSelector ? selector : vector;
  }
  // empty vector/array: {}
| < LEFT_BRACES >
  {
    vector = new ASTNode();
    vector.setType(ASTNode.Type.VECTOR);
  }
  < RIGHT_BRACES >
  {
    return vector;
  }
| t = < STRING >
  {
    s = t.image;
    if (ignoreCase)
    {
      s = s.toLowerCase();
    }
    // TODO - should we set the name of the ASTNode
    if (compareString(s, "true")) 
    {
      node = new ASTNode(Type.CONSTANT_TRUE);
    }
    else if (compareString(s, "false")) 
    {
      node = new ASTNode(Type.CONSTANT_FALSE);
    }
    else if (compareString(s, "pi"))
    {
      node = new ASTNode(Type.CONSTANT_PI);
    }
    else if (compareString(s, "avogadro"))
    {
      node = new ASTNode(Type.NAME_AVOGADRO);
    }
    else if (compareString(s, "time"))
    {
      node = new ASTNode(Type.NAME_TIME);
    }
    else if (compareString(s, "exponentiale"))
    {
      node = new ASTNode(Type.CONSTANT_E);
    }
    else if (compareString(s, "-infinity") || compareString(s, "-inf"))
    {
      node = new ASTNode(Double.NEGATIVE_INFINITY);
    }
    else if (compareString(s, "infinity") || compareString(s, "inf"))
    {
      node = new ASTNode(Double.POSITIVE_INFINITY);
    }
    else if (compareString(s, "notanumber") || compareString(s, "nan"))
    {
      node = new ASTNode(Double.NaN);
    }
    else
    {
      node = new ASTNode(s);
    }
    return node;
  }
}

