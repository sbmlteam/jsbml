/**
 * JavaCC template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */
options
{
  JDK_VERSION = "1.5";

  static = false;
}

PARSER_BEGIN(FormulaParserLL3ASTNode2)
/*
 * ----------------------------------------------------------------------------
 * This file is part of JSBML. Please visit <http://sbml.org/Software/JSBML>
 * for the latest version of JSBML and more information about SBML.
 *
 * Copyright (C) 2009-2022 jointly by the following organizations:
 * 1. The University of Tuebingen, Germany
 * 2. EMBL European Bioinformatics Institute (EBML-EBI), Hinxton, UK
 * 3. The California Institute of Technology, Pasadena, CA, USA
 * 4. The University of California, San Diego, La Jolla, CA, USA
 * 5. The Babraham Institute, Cambridge, UK
 * 6. The University of Toronto, Toronto, ON, Canada
 *
 * This library is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation. A copy of the license agreement is provided
 * in the file named "LICENSE.txt" included with this software distribution
 * and also available online as <http://sbml.org/Software/JSBML/License>.
 * ----------------------------------------------------------------------------
 */
package org.sbml.jsbml.math.parser;

import java.io.IOException;
import java.util.ArrayList;
import java.util.InvalidPropertiesFormatException;
import java.util.Properties;
import org.sbml.jsbml.ASTNode;
import org.sbml.jsbml.math.ASTNode2;
import org.sbml.jsbml.math.ASTBoolean;
import org.sbml.jsbml.math.ASTCnExponentialNode;
import org.sbml.jsbml.math.ASTCnIntegerNode;
import org.sbml.jsbml.math.ASTCnRationalNode;
import org.sbml.jsbml.math.ASTCnRealNode;
import org.sbml.jsbml.math.ASTConstantNumber;
import org.sbml.jsbml.math.ASTCSymbolAvogadroNode;
import org.sbml.jsbml.math.ASTCSymbolDelayNode;
import org.sbml.jsbml.math.ASTCSymbolTimeNode;
import org.sbml.jsbml.math.ASTDivideNode;
import org.sbml.jsbml.math.ASTFunction;
import org.sbml.jsbml.math.ASTHyperbolicNode;
import org.sbml.jsbml.math.ASTLambdaFunctionNode;
import org.sbml.jsbml.math.ASTLogarithmNode;
import org.sbml.jsbml.math.ASTLogicalOperatorNode;
import org.sbml.jsbml.math.ASTMinusNode;
import org.sbml.jsbml.math.ASTPiecewiseFunctionNode;
import org.sbml.jsbml.math.ASTPowerNode;
import org.sbml.jsbml.math.ASTPlusNode;
import org.sbml.jsbml.math.ASTQualifierNode;
import org.sbml.jsbml.math.ASTRelationalOperatorNode;
import org.sbml.jsbml.math.ASTRootNode;
import org.sbml.jsbml.math.ASTTimesNode;
import org.sbml.jsbml.math.ASTTrigonometricNode;
import org.sbml.jsbml.math.ASTUnaryFunctionNode;
import org.sbml.jsbml.ASTNode.Type;
import org.sbml.jsbml.resources.Resource;
import org.sbml.jsbml.math.parser.IFormulaParser;

/**
 * Class used to parse infix mathematical formula and returns a representation of it as an Abstract Syntax Tree (AST).
 * <p>
 * Support almost the same syntax as defined in <a href="http://sbml.org/Software/libSBML/docs/java-api/org/sbml/libsbml/libsbml.html#parseL3Formula(java.lang.String)">
 * the LibSBML L3 parser</a>. The things not supported for now are the units associated with numbers.
 *
 * @author Alexander D&ouml;rr
 * @author Nicolas Rodriguez
 * @author Victor Kofia
 * @since 1.0
 */
public class FormulaParserLL3ASTNode2 implements IFormulaParser
{

  public static Properties stringToType = new Properties();

  private boolean ignoreCase = false;


  static
  {	  
    String path = "cfg/ASTNodeTokens.xml";
    try
    {
      stringToType.loadFromXML(Resource.class.getResourceAsStream(path));
    }
    catch (InvalidPropertiesFormatException e)
    {
      throw new RuntimeException("Invalid configuration file entries in file " + Resource.class.getResource(path), e);
    }
    catch (IOException e)
    {
      throw new RuntimeException("Could not read configuration file " + Resource.class.getResource(path), e);
    }
  } 

  /**
   * Sets the case sensitivity of the parser, for the mathml elements.
   *
   * <p>The default behavior is to be case sensitive, meaning
   * '{@code cos}' would be recognized as the mathematical <a href="http://www.w3.org/TR/MathML2/chapter4.html#contm.trig">cosinus</a> but
   * '{@code Cos}', '{@code cOs}' or any other alternatives would be recognized 
   * as a name and read as a 'ci' element. If you pass {@code false} to this method
   * all the different versions of {@code cos} would be recognized  as the mathematical
   * <a href="http://www.w3.org/TR/MathML2/chapter4.html#contm.trig">cosinus</a>.  
   *
   * @param caseSensitive boolean to define if the parser should be case sensitive or not. 
   */
  public void setCaseSensitive(boolean caseSensitive)
  {
	this.ignoreCase = !caseSensitive;
  }
  
  private void checkSize(ArrayList < ASTNode2 > arguments, int i) throws ParseException
  {
    if (arguments.size() > i)
    {
      throw new ParseException();
    }
  }

  private Integer getInteger(ASTNode2 node)
  {
    return node.getType() == Type.INTEGER ? ((ASTCnIntegerNode)node).getInteger() : null;
  }
  
/**
 * Returns a piecewise {@link ASTNode} representing the modulo operation between the left and right child given.
 *
 * <p/> The formula produced for 'a % b' or modulo(a, b) is 'piecewise(floor(a/b), gt(a/b, 0), ceil(a/b))'
 *
 * @param leftChild
 * @param rightChild
 * @return a piecewise {@link ASTNode} representing the modulo operation between the left and right child given.
 * @see http://sbml.org/Documents/FAQ#Why_can.27t_I_use_the_.3Crem.3E_operator_in_SBML_MathML.3F
 */
  private ASTPiecewiseFunctionNode createModulo(ASTNode2 leftChild, ASTNode2 rightChild)
  {
      ASTPiecewiseFunctionNode node = new ASTPiecewiseFunctionNode();
		
	  ASTUnaryFunctionNode floorNode = new ASTUnaryFunctionNode(Type.FUNCTION_FLOOR);
	  ASTDivideNode aDividedByB = new ASTDivideNode();
	  aDividedByB.addChild(leftChild);
	  aDividedByB.addChild(rightChild);
		
	  floorNode.addChild(aDividedByB);
	  node.addChild(floorNode);
		
	  ASTRelationalOperatorNode greaterThan = new ASTRelationalOperatorNode(Type.RELATIONAL_GT);
	  greaterThan.addChild(aDividedByB.clone());
	  greaterThan.addChild(new ASTCnIntegerNode(0));
		
	  node.addChild(greaterThan);
		
	  ASTUnaryFunctionNode ceilNode = new ASTUnaryFunctionNode(Type.FUNCTION_CEILING);
	  ceilNode.addChild(aDividedByB.clone());
		
	  node.addChild(ceilNode);

	  return node;	
  }    
  
}

PARSER_END(FormulaParserLL3ASTNode2)


SKIP :
{
  " "
| "\t"
}



TOKEN :
{
  < INTEGER : (< DIGIT >)+ >
}
TOKEN :
{
  < DIGIT : [ "0"-"9" ] >
}


TOKEN :
{
  < NUMBER :
    (< DIGIT >)+
    (
      "." (< DIGIT >)+
    )?
  | "." (< DIGIT >)+ >
}

TOKEN :
{
  < EXPNUMBER : ([ "-" ])? < NUMBER > [ "E", "e" ] ([ "+", "-" ])? < INTEGER > >
}

TOKEN :
{
  < SLPITTER : [ "," ] >
}

TOKEN :
{
  < PLUS : "+" >
}

TOKEN :
{
  < POWER : "^" >
}

TOKEN :
{
  < MINUS : "-" >
}

TOKEN :
{
  < TIMES : "*" >
}

TOKEN :
{
  < DIVIDE : "/" >
}

/*
// removed to support the boolean NOT as !
TOKEN :
{
  < FACTORIAL : "!" >
}
*/

TOKEN :
{
  < MODULO : "%" >
}

TOKEN :
{
  < OPEN_PAR : "(" >
}

TOKEN :
{
  < CLOSE_PAR : ")" >
}

TOKEN :
{
  < LEFT_BRACES : "{" >
}

TOKEN :
{
  < RIGHT_BRACES : "}" >
}

TOKEN :
{
  < LEFT_BRACKET : "[" >
}

TOKEN :
{
  < RIGHT_BRACKET : "]" >
}

TOKEN :
{
  < COMPARISON :
	  "<"
	| "<="
	| ">"
	| ">="
	| "=="
	| "!=" >
}

TOKEN :
{
  < BOOLEAN_LOGIC :
    < AND >
  | < OR >
  | < XOR > >
}

TOKEN :
{
  < AND :
    "And"
  | "AND"
  | "&&" >
}
/*    "and"
  | "or"
    "not"
  | "xor"
    removed to support or(true, false)
 */

TOKEN :
{
  < OR :
    "OR"
  | "Or"
  | "||" >
}

TOKEN :
{
  < XOR :
    "XOR"
  | "Xor" >
}

TOKEN :
{
  < NOT :
    "NOT"
  | "Not"
  | "!" >
}

TOKEN :
{
  < LOG : "log" >
}

TOKEN :
{
  < STRING : (< LETTER > | [ "_" ] )+ (< IDCHAR >)*>
}

TOKEN :
{
	< IDCHAR : < LETTER > | < DIGIT > | "_" >
}

TOKEN :
{
	< LETTER : [ "a"-"z", "A"-"Z" ]>
}

Token string() :
{
  Token t;
}
{
  (
    t = < LOG >
  | t = < STRING >
  )
  {
    return t;
  }
}

TOKEN :
{
  < EOL :
    "\n"
  | "\r" >
}

ASTNode parse() :
{
  ASTNode2 node = null;
}
{
  node = Expression()
  {
    return new ASTNode(node);
  }
}

private ASTNode2 Expression() :
{
  ASTNode2 value = null;
}
{
  value = TermLvl1()
  (
    < EOF >
  | < EOL >
  )
  {
    return value;
  }
}

// TermLvl3, TermLvl2 here to define the operator precedence ???!? Could it be done in one method ??

private ASTNode2 TermLvl3() :
{
  ASTNode2 rightChild;
  ASTNode2 leftChild;
  ASTNode2 node = null;
  
}
{
  leftChild = Primary()
  (
    < POWER > rightChild = Primary()
    {
      node = new ASTPowerNode();
      ((ASTPowerNode)node).addChild(leftChild);
      ((ASTPowerNode)node).addChild(rightChild);
      leftChild = node;
    }
/* // removed to support the logical operator NOT '!'

  | < FACTORIAL >
    {
      node = new ASTNode(Type.FUNCTION_FACTORIAL);
      node.addChild(leftChild);
      leftChild = node;
    }*/
  )*
  {
    return leftChild; 
  }
}

private ASTNode2 TermLvl2() :
{
  ASTNode2 rightChild;
  ASTNode2 leftChild;
  ASTNode2 node = null;
}
{
  leftChild = TermLvl3()
  (
    < TIMES > rightChild = TermLvl3()
    {
      node = new ASTTimesNode();
      ((ASTTimesNode)node).addChild(leftChild);
      ((ASTTimesNode)node).addChild(rightChild);
      leftChild = node;
    }
  | < DIVIDE > rightChild = TermLvl3()
    {
      Integer left, right;
      left = getInteger(leftChild);
      right = getInteger(rightChild);
      if (left != null && right != null)
      {
        node = new ASTDivideNode();
        ((ASTDivideNode)node).addChild(new ASTCnIntegerNode(left));
        ((ASTDivideNode)node).addChild(new ASTCnIntegerNode(right));
        leftChild = node;
      }
      else
      {
        node = new ASTDivideNode();
        ((ASTDivideNode)node).addChild(leftChild);
        ((ASTDivideNode)node).addChild(rightChild);
        leftChild = node;
      }
    }
  |  < MODULO > rightChild = TermLvl3()
    {
      node = createModulo(leftChild, rightChild);
      leftChild = node;
    }    
  )*
  {
	return leftChild;
  }
}

private ASTNode2 TermLvl1() :
{
  ASTNode2 rightChild = null;
  ASTNode2 leftChild;
  ASTNode2 node = null;
  Token t;
  String s;
  Type type = null;
}
{
  leftChild = TermLvl2()
  (
    < PLUS > rightChild = TermLvl2()
    {
      node = new ASTPlusNode();
      ((ASTPlusNode)node).addChild(leftChild);
      ((ASTPlusNode)node).addChild(rightChild);
      leftChild = node;
    }
  | < MINUS > rightChild = TermLvl2()
    {
      node = new ASTMinusNode();
      ((ASTMinusNode)node).addChild(leftChild);
      ((ASTMinusNode)node).addChild(rightChild);
      leftChild = node;
    }
  | t = < BOOLEAN_LOGIC > rightChild = TermLvl2()
    {
      // TODO - do we want to ignore the case for those cases ? 
      node = new ASTLogicalOperatorNode(Type.getTypeFor(t.image));
      ((ASTLogicalOperatorNode)node).addChild(leftChild);
      ((ASTLogicalOperatorNode)node).addChild(rightChild);
      leftChild = node;
    }
  | t = < COMPARISON > rightChild = TermLvl2()
    {
      node = new ASTRelationalOperatorNode(Type.getTypeFor(t.image));
      ((ASTRelationalOperatorNode)node).addChild(leftChild);
      ((ASTRelationalOperatorNode)node).addChild(rightChild);
      leftChild = node;
    }
  )*
  {
	return leftChild;
  }
}

private ASTNode2 Primary() throws NumberFormatException :
{
  Token t;
  double d;
  int i;
  ASTNode2 node = null;
  ASTFunction vector = null;
  ASTNode2 child, furtherChild;
  String s;
  String vals [ ];
  ArrayList < ASTNode2 > arguments = new ArrayList < ASTNode2 > ();
}
{
  t = < INTEGER >
  {
    i = Integer.parseInt(t.image); // Could use StringTools.parseXXX methods here but not doing so allow to support different locale ??
    node = new ASTCnIntegerNode(i);
    return node;
  }
| t = < NUMBER >
  {
    d = Double.parseDouble(t.image); 
    node = new ASTCnRealNode(d);
    return node;
  }
| t = < EXPNUMBER >
  {
    s = t.image;
    vals = s.toLowerCase().split("e");
    if (vals [ 1 ].startsWith("+"))
    {
      i = Integer.parseInt(vals [ 1 ].substring(1));
    }
    else
    {
      i = Integer.parseInt(vals [ 1 ]);
    }
    node = new ASTCnExponentialNode();
    ((ASTCnExponentialNode)node).setMantissa(Double.parseDouble(vals [ 0 ]));
    ((ASTCnExponentialNode)node).setExponent(i);
    return node;
  }
| LOOKAHEAD(2)
  t = string() < OPEN_PAR > child = TermLvl1()
  (
    < SLPITTER > furtherChild = TermLvl1()
    {
      arguments.add(furtherChild);
    }
  )*
  < CLOSE_PAR >
  {
    s = t.image;
    Type type = null;

    if (ignoreCase)
    {
	  s = s.toLowerCase();
    }

    if (stringToType.containsKey(s))
    {
      type = Type.valueOf(stringToType.getProperty(s.toLowerCase()).toUpperCase());
    }
    
    if (s.equals("pow") || s.equals("power"))
    {
      checkSize(arguments, 1);
      ((ASTPowerNode)node).addChild(child);
    }
    else if (s.equals("sqr"))
    {
      checkSize(arguments, 0);
      ((ASTRootNode)node).addChild(child);
      ((ASTRootNode)node).addChild(new ASTCnIntegerNode(2));
    }
    else if (s.equals("sqrt"))
    {
      checkSize(arguments, 0);
      ((ASTRootNode)node).addChild(child);
    }
    else if (s.equals("not"))
    {
      checkSize(arguments, 0);
      ((ASTRelationalOperatorNode)node).addChild(child);
    }
    else if (s.equals("ln"))
    {
      checkSize(arguments, 0);
      node = new ASTLogarithmNode(new ASTConstantNumber(Math.E), child);
    }
    else if (s.equals("lambda"))
    {
	  node = new ASTLambdaFunctionNode();
	  ASTQualifierNode bvar = new ASTQualifierNode(Type.QUALIFIER_BVAR);
	  bvar.addChild(child);
      ((ASTLambdaFunctionNode)node).addChild(bvar);
    }
    else if (s.equals("piecewise"))
    {
      node = new ASTPiecewiseFunctionNode();
      ((ASTPiecewiseFunctionNode)node).addChild(child);
    }
    else if (s.equals("modulo") || s.equals("mod"))
    {
      checkSize(arguments, 1);
      ASTNode2 rightChild = arguments.get(0);
      arguments.clear();
      
	  node = createModulo(child, rightChild);
	  return node;
    }
    else
    {
      throw new ParseException();
    }
    
    if (node != null && node instanceof ASTFunction)
    {
	  for (ASTNode2 argument : arguments)
	  {
	    ((ASTFunction)node).addChild(argument);
	  }
    }
    return node;
  }
  | < OPEN_PAR > node = TermLvl1() < CLOSE_PAR >
  {
    return node;
  }
  | LOOKAHEAD(4)    t = < STRING >
				  {
				    ASTFunction selector = new ASTFunction();
				    selector.setType(Type.FUNCTION_SELECTOR);
				    selector.addChild(new ASTRelationalOperatorNode(Type.getTypeFor(t.image)));
				  }
				  ( < LEFT_BRACKET >
	                (node = TermLvl1())
	                {
					selector.addChild(node);
	                }
				    < RIGHT_BRACKET >
				  )+
  {return selector; }
 | < OPEN_PAR > node = TermLvl1() < CLOSE_PAR >
  {
    return node;
  }
|  LOOKAHEAD(2) < LEFT_BRACES > node = TermLvl1()
  {
    ASTFunction selector = new ASTFunction();
    vector = new ASTFunction();
    boolean isSelector = false;
	selector.setType(Type.FUNCTION_SELECTOR);
    vector.setType(Type.VECTOR);
    vector.addChild(node);
  }
   (
    < SLPITTER > node = TermLvl1()
    {
      vector.addChild(node);
    }
  )*
  < RIGHT_BRACES >
  {
	selector.addChild(vector);
  }
  ( < LEFT_BRACKET >
    (node = TermLvl1())
	{
	  isSelector = true;
	  selector.addChild(node);
	}
    < RIGHT_BRACKET >
  )*
  {return isSelector ? selector : vector; }
| < LEFT_BRACES >
  {
    vector = new ASTFunction();
    vector.setType(Type.VECTOR);
  }
  < RIGHT_BRACES >
  {
    return vector;
  }
| < MINUS > node = Primary()
  {
    ASTMinusNode uiMinus = new ASTMinusNode();
    uiMinus.addChild(node);
    return uiMinus;
  }
| < NOT > node = TermLvl1()
  {
    ASTLogicalOperatorNode not = new ASTLogicalOperatorNode(Type.LOGICAL_NOT);
    not.addChild(node);
    return not;
  }
| < LOG > child = Primary()
  {
    node = new ASTLogarithmNode(new ASTConstantNumber(Math.E), child);
    return node;
  }
| t = < STRING >
  {
    s = t.image;

	if (ignoreCase)
	{
	  s = s.toLowerCase();
	}
	// TODO - should we set the name of the ASTNode
    
    if (s.equalsIgnoreCase("true")) // TODO - do we want to ignore the case for those ?
    {
      node = new ASTBoolean(Type.CONSTANT_TRUE);
    }
    else if (s.equalsIgnoreCase("false"))  // TODO - do we want to ignore the case for those ?
    {
      node = new ASTBoolean(Type.CONSTANT_FALSE);
    }
    else if (s.equals("pi"))
    {
      node = new ASTConstantNumber(Type.CONSTANT_PI);
    }
    else if (s.equals("avogadro"))
    {
      node = new ASTCSymbolAvogadroNode();
    }
    else if (s.equals("time"))  // TODO - do we want to ignore the case for those ?
    {
      node = new ASTCSymbolTimeNode();
    }
    else if (s.equals("exponentiale"))
    {
      node = new ASTConstantNumber(Type.CONSTANT_E);
    }
    else if (s.equals("-infinity") || s.equals("-INF"))
    {
      node = new ASTCnRealNode(Double.NEGATIVE_INFINITY);
    }
    else if (s.equals("infinity") || s.equals("INF"))
    {
      node = new ASTCnRealNode(Double.POSITIVE_INFINITY);
    }
    else if (s.equals("NotANumber") || s.equals("NaN"))  // TODO - do we want to ignore the case for those ?
    {
      node = new ASTCnRealNode(Double.NaN);
    }
    else
    {
      throw new ParseException();
    }
    return node;
  }

}
