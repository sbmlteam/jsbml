<?xml version="1.0"?>
<!-- 

    This file is part of JSBML. Please visit http://sbml.org/Software/JSBML
    for the latest version of JSBML and more information about SBML.

    Copyright (C) 2009-2022 jointly by the following organizations:
    1. The University of Tuebingen, Germany
    2. EMBL European Bioinformatics Institute (EBML-EBI), Hinxton, UK
    3. The California Institute of Technology, Pasadena, CA, USA
    4. The University of California, San Diego, La Jolla, CA, USA
    5. The Babraham Institute, Cambridge, UK
    6. The University of Toronto, Toronto, ON, Canada

    This library is free software; you can redistribute it and/or modify it
    under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation. A copy of the license agreement is provided
    in the file named "LICENSE.txt" included with this software distribution
    and also available online as http://sbml.org/Software/JSBML/License.

-->

<project
  default ="usage"
  basedir=".">

  <echo message="Determining the revision number of JSBML" />	
  <exec executable="svn" outputproperty="svninfo.xml"  resultproperty="svn.return.status" failifexecutionfails="false">
    <arg line="info --xml" />
  </exec>
  
  <!-- We consider it is a subversion checkout if the svninfo file contain the closing info tag --> 
  <condition property="svn.checkout">
		<and>
	    <contains string="${svninfo.xml}" substring="/info>"/>
			<isset property="svn.return.status"/>
		</and>
  </condition>
  
  <exec executable="git" outputproperty="git.commit.hash" resultproperty="git.return.status" failifexecutionfails="false">
    <arg line="log -1 --pretty=format:%H" />
  </exec>

  <!-- We consider it is a git clone if the property does not contain some error keywords and a return code is given (meaning the executable was found) --> 
  <condition property="git.clone">
		<and>
  		<not>
    		<contains string="${git.commit.hash}" substring="fatal"/>
  		</not>
			<isset property="git.return.status"/>
		</and>
  </condition>
	
	<!-- last property to check if neither svn or git were used and the sources were just downloaded as .zip or .tar.gz -->	
	<condition property="vcs.used">
		<or>
			<equals arg1="${git.clone}" arg2="true"/>
			<equals arg1="${svn.checkout}" arg2="true"/>
		</or>
	</condition>
	
  <tstamp>
    <format property="YEAR" pattern="yyyy" />
  </tstamp>

  <property file="${basedir}/../jsbml-build.properties"/>

	<!-- =================================================================== -->
	<!-- Initialization target                                               -->
	<!-- =================================================================== -->

	<target
	 description="Initialization target"
	 name="init" depends="svn.build.number, git.build.number, default.build.number">
		
		<property name="Name" value="JSBML"/>
		<property name="name" value="jsbml"/>
		<property name="version" value="1.6.1"/>
		<property name="api.version" value="1.6.1"/>

		<property name="year" value="${YEAR}"/>

		<echo message="-----------   ${Name} ${version} [${year}] ------------"/>
		<echo message="-----------     ${TODAY}   ------------"/>
		<echo message="-----------     ${DSTAMP} ${TSTAMP}  ------------"/>
		<echo message="-----------   git revision ${jsbml.revision}  ------------"/>

		<property environment="env"/>
		<property name="build.compiler" value="modern"/>
		<property name="build.sysclasspath" value="ignore"/>
		<property name="debug" value="on"/>
		<property name="optimize" value="on"/>
		<property name="deprecation" value="false"/>
		<property name="depend" value="true"/>
		<property name="verbose" value="false"/>

		<property name="build.number" value="${DSTAMP}-${TSTAMP}"/>
		<property name="build.name" value="${version} (build ${jsbml.revision}-${build.number})"/>

		<property name="src.dir" value="${basedir}/src"/>
		<property name="test.src.dir" value="${basedir}/test"/>
		<property name="build.dir" value="${basedir}/build"/>
		<property name="build.src" value="${basedir}/build/src"/>
		<property name="build.dest" value="${basedir}/build/classes"/>
		<property name="build.javadocs" value="${basedir}/build/apidocs"/>
		<property name="jars.dir" value="${basedir}/lib"/>
		<property name="dist.root" value="${basedir}/dist"/>
		<property name="dist.dir" value="${dist.root}/${name}-${version}"/>
		<property name="package.dir" value="${basedir}/build/package"/>
		<property name="resource.dir" value="${basedir}/resources"/>

		<property name="cellDesigner.module.base.dir" value="${basedir}/../modules/celldesigner"/>
		<property name="libSBMLio.module.base.dir" value="${basedir}/../modules/libSBMLio"/>

		<filter token="year" value="${year}"/>
		<filter token="version" value="${version}"/>
		<filter token="date" value="${TODAY}"/>
		<filter token="log" value="true"/>
		<filter token="verbose" value="true"/>

		<!-- add everything needed to the classpath -->
		<!-- adjust the settings to your local environment -->
		<path id="classpath">
			<fileset dir="${jars.dir}" includes="*.jar *.zip">
			</fileset>
		</path>

	</target>

	<!-- =================================================================== -->
	<!-- Help on usage                                                       -->
	<!-- =================================================================== -->
	<target
	 name="usage"
	 description="Help on usage"
	 depends="init"
	>
		<echo message=""/>
		<echo message=""/>
		<echo message=" ${Name} Build file"/>
		<echo message=" -------------------------------------------------------------"/>
		<echo message=""/>
		<echo message=" available targets are:"/>
		<echo message=""/>
		<echo message="   compile     --> compiles the source code"/>
		<echo message="   jar         --> generates the ${name}.jar file"/>
		<echo message="   bigjar      --> generates the ${name}-with-dependencies.jar file"/>
		<echo message="   test        --> runs the tests"/>
		<echo message="   checkConsistencyTest        --> runs the only tests for the sbml online validator"/>
		<echo message="   update-sbo  --> Updates the SBO Ontology file "/>
		<echo message="   javadoc     --> generates the API documentation"/>
		<echo message="   clean       --> cleans up the directory"/>
		<echo message=""/>
		<echo message=" See the comments inside the build.xml file for more details."/>
		<echo message=" -------------------------------------------------------------"/>
		<echo message=""/>
		<echo message=""/>
	</target>

	<!-- =================================================================== -->
	<!-- Creating the jsbml revision and url if it is an svn checkout        -->
	<!-- =================================================================== -->
	<target
	   name="svn.build.number"
	   description="Finds out the subversion build number"
	   if="svn.checkout" >

		<!-- <echo message="It seems to be an SVN checkout"/> -->
	  
	  <xmlproperty collapseAttributes="true">
	    <propertyresource name="svninfo.xml" />
	  </xmlproperty>
	  <property name="jsbml.revision" value="${info.entry.revision}" />
	  <property name="jsbml.url" value="${info.entry.url}" />
	</target>
	
	<!-- =================================================================== -->
	<!-- Creating the jsbml revision and url if it is a git clone            -->
	<!-- =================================================================== -->
	<target
	   name="git.build.number"
	   description="Finds out the git build number"
	   if="git.clone"
	   unless="svn.checkout"
	   >
		<!-- <echo message="It seems to be a git clone"/> -->
		
	  <exec executable="git" outputproperty="git.origin.url" failifexecutionfails="false">
	    <arg line="config --get remote.origin.url" />
	  </exec>

		<property name="jsbml.revision" value="${git.commit.hash}" />
		<property name="jsbml.url" value="${git.origin.url}" />
		
	</target>
	
	<!-- =================================================================== -->
	<!-- Creating the jsbml revision and url if it just an archive unpacked  -->
	<!-- =================================================================== -->
	<target
	   name="default.build.number"
	   description="Finds out the default build number"
	   unless="vcs.used">

		<!-- <echo message="Could not retrieve automatically the revision number from svn or git !"/> -->
		
	  <property name="jsbml.revision" value="build run on ${DSTAMP}" />
	  <property name="jsbml.url" value="no url provided" />
	  
	</target>
		
	<!-- =================================================================== -->
	<!-- Prepares the build directory                                        -->
	<!-- =================================================================== -->
	<target
	  name="prepare"
	  description="Prepares the build directory"
	  depends="init"
	>
		<mkdir dir="${build.dir}"/>
		<echo message="Done"/>
	</target>

	<!-- =================================================================== -->
	<!-- Prepares the source code                                            -->
	<!-- =================================================================== -->
	<target
	  name="prepare-src"
	  description="Prepares the source code"
	  depends="prepare"
	>
		<!-- create directories -->
		<mkdir dir="${build.src}"/>
		<mkdir dir="${build.dest}"/>
		<mkdir dir="${build.dest}/META-INF"/>
		<mkdir dir="${package.dir}"/>
		<mkdir dir="${dist.root}"/>
		<mkdir dir="${dist.dir}"/>

		<!-- copy src files -->
		<copy todir="${build.src}" overwrite="yes">
			<fileset 
            dir="${src.dir}"
            excludes="**/.svn*, **/*.class, **/*~, **/*.tgz, **/*.zip **/*.java.*">
			</fileset>
		</copy>

		<copy todir="${build.src}" overwrite="yes">
			<fileset 
  	            dir="${test.src.dir}"
  	        	includes="org/sbml/jsbml/**"
  	            excludes="**/.svn*, **/*.class, **/*~, **/*.tgz, **/*.zip ">
			</fileset>
		</copy>

		<copy todir="${build.src}" overwrite="yes">
			<fileset 
  	  	            dir="${resource.dir}"
  	  	        	includes="org/sbml/jsbml/**, **/*.properties"
  	  	            excludes="**/.svn*, **/*~, **/*.tgz, **/*.zip">
			</fileset>
		</copy>
		
		<echo message="Value of the use-old-astnode property in core = '${use.old.astnodes}'"/>
		<antcall target="prepare-new-astnode" inheritrefs="true" inheritall="true"/>

	</target>

	<!-- =================================================================== -->
	<!-- Prepares the source code to use the new ASTNode class        -->
	<!-- =================================================================== -->
	<target
	  name="prepare-new-astnode"
	  description="Prepares the source code to use the new ASTNode class"
	  unless="${use.old.astnodes}"
	>
	  <echo message="Building JSBML core using the new ASTNode class!"/>
	  <copy file="${src.dir}/org/sbml/jsbml/ASTNode.java" tofile="${build.src}/org/sbml/jsbml/ASTNode.java.oldASTNode" overwrite="yes"/>
	  <copy file="${src.dir}/org/sbml/jsbml/ASTNode.java.newASTNode" tofile="${build.src}/org/sbml/jsbml/ASTNode.java" overwrite="yes"/>
		<copy file="${src.dir}/org/sbml/jsbml/ASTNode.java.newASTNode" tofile="${build.src}/org/sbml/jsbml/ASTNode.java.newASTNode" overwrite="yes"/>

	</target>

	<!-- =================================================================== -->
	<!-- Modify some files                                                  -->
	<!-- =================================================================== -->
	<target
	  name="gen-build-number"
	  description="Modify some files"
	  unless="dev.mode"
	>
		<echo message="Updating the files with the build number..."/>

		<replace file="${basedir}/doc/Readme.html"
                token="[BUILD.NUMBER]"
                value="${build.name}" />

	</target>

	<!-- =================================================================== -->
	<!-- Modify back some files                                             -->
	<!-- =================================================================== -->
	<target
	  name="gen-build-number-back"
	  description="Modify back some files"
	  depends="jar"
	  unless="dev.mode"
	>
		<echo message="Updating back the files with [BUILD.NUMBER]..."/>

		<replace file="${basedir}/doc/Readme.html"
                token="${build.name}"
                value="[BUILD.NUMBER]" />
	</target>


	<!-- =================================================================== -->
	<!-- Compiles the source directory                                       -->
	<!-- =================================================================== -->
	<target
	  name="compile"
	  description="Compiles the source directory"
	  depends="prepare-src"
	>
		<javac srcdir="${build.src}"
           destdir="${build.dest}"
           debug="${debug}"
           optimize="${optimize}"
           verbose="${verbose}"
		       source="${jsbml.build.javac.source}"
    		   target="${jsbml.build.javac.target}"
           classpathref="classpath">
<!--			<compilerarg value="-Xlint:deprecation"/>
			<compilerarg value="-Xlint:unchecked"/> -->
		</javac>

		<property name="api.version" value="1.0-beta"/>
		<property name="vendor" value="The JSBML Team"/>

		<manifest file="${build.dest}/META-INF/MANIFEST.MF">
			<attribute name="Bundle-Name"            value="${Name}"/>
			<attribute name="Built-By"               value="${user.name}"/>
			<attribute name="Built-Date"             value="${TODAY}"/>
			<attribute name="Bundle-Version"         value="${version}"/>
			<attribute name="Bundle-Revision"        value="${jsbml.revision}"/>
			<attribute name="Bundle-Vendor"          value="${vendor}"/>
			<attribute name="Bundle-RequiredExecutionEnvironment" value="JavaSE-1.6"/>
			<attribute name="Created-By"             value="${vendor}"/>
			<section name="${Name}">
				<attribute name="Specification-Title"    value="${Name}"/>
				<attribute name="Specification-Version"  value="${api.version}"/>
				<attribute name="Specification-Vendor"   value="${vendor}"/>
				<attribute name="Implementation-Title"   value="${Name}"/>
				<attribute name="Implementation-Version" value="${version}, Revision ${jsbml.revision} (Build ${build.number} ${jsbml.url})"/>
				<attribute name="Implementation-Vendor"  value="${vendor}"/>
				<attribute name="Implementation-URL"     value="http://sbml.org/Software/JSBML/"/>
			</section>
		</manifest>

	</target>


	<!-- =================================================================== -->
	<!-- Creates the class package                                           -->
	<!-- =================================================================== -->
	<target
	  name="jar"
	  description="Creates the class package"
	  depends="compile"
	>
		<copy todir="${build.dest}">
			<fileset dir="${build.src}" 
				includes="**/*.png **/*.gif **/*.xsd **/*.tmpl **/data/* **/*.xml **/*.cfg **/*.obo **/*.properties">
			</fileset>
		</copy>
		<jar jarfile="${build.dir}/${name}-${version}.jar" basedir="${build.dest}" manifest="${build.dest}/META-INF/MANIFEST.MF"/>

		<echo message="Value of the use-old-astnode property in core = '${use.old.astnodes}'"/>
		<antcall target="revert-new-astnode" inheritrefs="true" inheritall="true"/>
	</target>

	<!-- =================================================================== -->
	<!-- Creates the class package and include all the dependencies jars     -->
	<!-- into a big jsbml jar file.                                          -->
	<!-- =================================================================== -->
	<target
	  name="jar-src"
	  description="Creates the class package and includes all the dependencies jars into a big jsbml jar file"
	  depends="prepare-src"
	>
		<jar
	  	basedir="${build.src}"
	  	includes="**/*.java"
	  	index="true"
	  	jarfile="${build.dir}/${name}-${version}-src.jar"
	  />
	</target>

	<!-- =================================================================== -->
	<!-- Creates the class package and include all the dependencies jars     -->
	<!-- into a big jsbml jar file.                                          -->
	<!-- =================================================================== -->
	<target
	  name="bigjar"
	  description="Creates the class package and includes all the dependencies jars (and other resources) into a big jsbml jar file"
	  depends="compile"
	>

		<!-- we use the ${build.src} to include the sources of jsbml in the resulting jar -->
		<copy todir="${build.dest}">
			<fileset
            dir="${build.src}"
            includes="**/*.png **/*.gif **/*.xsd **/*.tmpl **/data/* **/*.xml **/*.cfg **/*.obo **/*.properties **/*.java" >
			</fileset>
		</copy>

		<jar
          basedir="${build.dest}"
		  duplicate="preserve"
		  filesetmanifest="mergewithoutmain"
		  index="true"
		  jarfile="${build.dir}/${name}-${version}-with-dependencies.jar"
		  manifest="${build.dest}/META-INF/MANIFEST.MF"
		>
			<zipgroupfileset dir="${jars.dir}" includes="*.jar"/>
			<service type="org.sbml.jsbml.xml.parsers.ReadingParser">
				<!-- This list need to be updated as soon as there is a new parser -->
				<provider classname="org.sbml.jsbml.xml.parsers.SBMLCoreParser" />
				<provider classname="org.sbml.jsbml.xml.parsers.XMLNodeReader" />
				<provider classname="org.sbml.jsbml.xml.parsers.MathMLStaxParser" />
				<provider classname="org.sbml.jsbml.xml.parsers.ArraysParser" />
				<provider classname="org.sbml.jsbml.xml.parsers.CompParser" />
				<provider classname="org.sbml.jsbml.xml.parsers.DistribParser" />
				<provider classname="org.sbml.jsbml.xml.parsers.DynParser" />
				<provider classname="org.sbml.jsbml.xml.parsers.FBCParser" />
				<provider classname="org.sbml.jsbml.xml.parsers.GroupsParser" />
				<provider classname="org.sbml.jsbml.xml.parsers.L3LayoutParser" />
				<provider classname="org.sbml.jsbml.xml.parsers.LayoutParser" />
				<provider classname="org.sbml.jsbml.xml.parsers.MultiParser" />
				<provider classname="org.sbml.jsbml.xml.parsers.QualParser" />
				<provider classname="org.sbml.jsbml.xml.parsers.RenderParser" />
				<provider classname="org.sbml.jsbml.xml.parsers.ReqParser" />
				<provider classname="org.sbml.jsbml.xml.parsers.SpatialParser" />
				<provider classname="org.sbml.jsbml.xml.parsers.UncertMLXMLNodeReader" />
			</service>
		</jar>
	</target>

	<!-- =================================================================== -->
	<!-- Revert the source code to use the new ASTNode class                 -->
	<!-- =================================================================== -->
	<target
	  name="revert-new-astnode"
	  description="Prepares the source code to use the old ASTNode class"
	  unless="${use.old.astnodes}"
	>
	  <echo message="Reverting JSBML core using the old ASTNode class!"/>
	  <copy file="${build.src}/org/sbml/jsbml/ASTNode.java.oldASTNode" tofile="${build.src}/org/sbml/jsbml/ASTNode.java" overwrite="yes"/>

	</target>

	<!-- =================================================================== -->
	<!-- Test the jsbml library                                              -->
	<!-- =================================================================== -->
	<target
	  name="test"
	  description="Test the jsbml library"
	  depends="jar"
	>

		<echo message="There should be NO failures or errors."/>
		<echo message=""/>
		<echo message="You can see a details of the tests on the two files : jsbmlTestResults.txt and libsbmlCompatibilityTestResults.txt"/>
		<echo message=""/>

		<junit printsummary="yes" >
			<!-- showoutput="yes" -->
			<formatter type="plain"/>
			<test name="org.sbml.jsbml.xml.test.Tests" outfile="jsbmlTestResults">
				<formatter type="plain"/>
			</test>
			<classpath>
				<path refid="classpath"/>
				<pathelement location="${build.dir}/${name}-${version}.jar"/>
			</classpath>
		</junit>
		<echo message=""/>

		<junit printsummary="yes" >
			<!-- showoutput="yes" -->
			<formatter type="plain"/>
			<test name="org.sbml.jsbml.xml.test.LibsbmlCompatibilityTests" outfile="libsbmlCompatibilityTestResults">
				<formatter type="plain"/>
			</test>
			<classpath>
				<path refid="classpath"/>
				<pathelement location="${build.dir}/${name}-${version}.jar"/>
			</classpath>
		</junit>
		<echo message=""/>

		<!--
		<junit printsummary="yes" >
			<formatter type="plain"/>
			<test name="org.sbml.jsbml.test.sbml.TestIncompatibilities" outfile="incompatibilitiesTestResults">
				<formatter type="plain"/>
			</test>
			<classpath>
				<path refid="classpath"/>
				<pathelement location="${build.dir}/${name}-${version}.jar"/>
			</classpath>
		</junit>
	-->

	</target>

	<!-- =================================================================== -->
	<!-- Test the jsbml library                                              -->
	<!-- =================================================================== -->
	<target
	  name="checkConsistencyTest"
	  description="Test the jsbml library"
	  depends="jar"
	>
		<echo message="These tests are using the sbml online validator"/>
		<echo message=""/>
		<echo message="You can see a details of the tests on the two files : sbmlOnlineValidatorTestResults.txt"/>
		<echo message=""/>

		<junit printsummary="yes" >
			<!-- showoutput="yes" -->
			<formatter type="plain"/>
			<test name="org.sbml.jsbml.xml.test.CheckConsistencyTests" outfile="sbmlOnlineValidatorTestResults">
				<formatter type="plain"/>
			</test>
			<classpath>
				<path refid="classpath"/>
				<pathelement location="${build.dir}/${name}-${version}.jar"/>
			</classpath>
		</junit>
		<echo message=""/>
	</target>


	<!-- =================================================================== -->
	<!-- Updates the SBO Ontology file                                       -->
	<!-- =================================================================== -->
	<target
	 name="update-sbo"
	 description="Updates the SBO Ontology file"
	>
		<get
		src="http://www.ebi.ac.uk/sbo/exports/Main/SBO_OBO.obo"
		dest="${basedir}/resources/org/sbml/jsbml/resources/cfg/SBO_OBO.obo"
	  	verbose="on"
	  />
	</target>

	<!-- =================================================================== -->
	<!-- Creates the API documentation                                       -->
	<!-- =================================================================== -->
	<target
	  name="javadoc"
	  depends="prepare-src"
	  description="Creates the API documentation"
	>
		<mkdir dir="${build.javadocs}"/>
		<javadoc
			 packagenames="org.*"
    		 excludepackagenames="org.sbml.jsbml.test.*, org.sbml.jsbml.xml.test.*"
             sourcepath="${build.src}"
             destdir="${build.javadocs}"
             classpathref="classpath"
             maxmemory="96m"
             author="true"
             version="true"
             use="true"
             splitindex="true"
             noindex="false"
             windowtitle="${Name} ${version} API Specification"
             doctitle="${Name} ${version} API Specification"
    	     breakiterator="yes"
    		 access="public"
        >
			<link href="http://docs.oracle.com/javase/6/docs/api/"/>
			<link href="http://www.biojava.org/docs/api17"/>
			<tag name="sbml.deprecated" description="Deprecated in SBML since:"/>
			<tag name="libsbml.deprecated" description="Note: this method is kept here as it exist in libSBML."/>
			<tag name="jsbml.note" description="Note"/>
			<tag name="jsbml.warning"/>
			<tag name="doc.note"  description="Documentation note"/>
			<tag name="date" description="Last modified:" />
		</javadoc>
	</target>

	<!-- =================================================================== -->
	<!-- Creates the javadocs jar package                                    -->
	<!-- =================================================================== -->
	<target
	  name="jar-javadoc"
	  description="Creates the javadocs jar package"
	  depends="javadoc"
	>
		<jar
		jarfile="${build.dir}/${name}-${version}-javadoc.jar"
		basedir="${build.javadocs}"
	  />
	</target>

	<!-- =================================================================== -->
	<!-- Creates the distribution                                            -->
	<!-- =================================================================== -->
	<target
	  name="dist"
	  description="Creates the distribution"
	  depends="prepare-src"
	>

		<!-- Creates the standard jar file -->

		<antcall target="clean"/>

		<antcall target="jar"/>
		<antcall target="jar-src"/>
		<copy todir="${dist.dir}" file="${build.dir}/${name}-${version}-src.jar"/>

		<antcall target="test"/>

		<copy todir="${dist.dir}" file="${build.dir}/${name}-${version}.jar"/>
		<copy todir="${dist.root}" file="${build.dir}/${name}-${version}.jar"/>

		<!-- Creates the jar file including all the dependencies -->

		<antcall target="bigjar"/>

		<copy todir="${dist.dir}" file="${build.dir}/${name}-${version}-with-dependencies.jar"/>
		<copy todir="${dist.root}" file="${build.dir}/${name}-${version}-with-dependencies.jar"/>

		<!-- Creates and copy the generated javadoc -->
		<antcall target="jar-javadoc"/>

		<copy todir="${dist.dir}/doc/api">
			<fileset dir="${build.javadocs}/" includes="**/*">
			</fileset>
		</copy>
		<copy todir="${dist.dir}" file="${build.dir}/${name}-${version}-javadoc.jar"/>

		<!-- Copy the source files -->
		<copy todir="${dist.dir}/src">
			<fileset dir="${build.src}/" includes="**/*">
			</fileset>
		</copy>

		<!-- Copy all the dependencies jar files -->
		<copy todir="${dist.dir}/lib">
			<fileset dir="${jars.dir}/" includes="*.jar">
			</fileset>
		</copy>

		<copy todir="${dist.dir}">
			<fileset dir="${basedir}/" includes="LICENSE.txt NEWS.txt README AUTHORS.txt build.xml">
			</fileset>
		</copy>
		<copy todir="${dist.dir}/licenses">
			<fileset dir="${basedir}/licenses" includes="**/*">
			</fileset>
		</copy>

		<copy todir="${dist.dir}/doc">
			<fileset dir="${basedir}/doc" includes="**/*.pdf **/*.jpg **/*.java" excludes="posters/** publications/** templates/**">

			</fileset>
		</copy>

		<!-- create the modules files -->
		<antcall target="module-dist"/>

		<!-- Creates the archives to be distributed -->
		<zip basedir="${dist.root}" destfile="${dist.root}/${name}-${version}.zip" includes="${name}-${version}/**"/>

		<!-- Not generating a tar.gz a having only a zip file should be enough -->
		<!-- <tar basedir="${dist.root}" destfile="${dist.root}/${name}-${version}.tar.gz" includes="${name}-${version}/**" compression="gzip"/> -->

	</target>


	<!-- =================================================================== -->
	<!-- Build the jsbml modules                                             -->
	<!-- =================================================================== -->
	<target
	  name="module"
	  description="Build the jsbml modules"
	  depends="init"
	>

		<ant dir="${cellDesigner.module.base.dir}" inheritAll="false" inheritRefs="false">
			<target name="clean"/>
			<target name="jar"/>
			<target name="javadoc"/>
		</ant>

		<ant dir="${libSBMLio.module.base.dir}"  inheritAll="false" inheritRefs="false">
			<target name="clean"/>
			<target name="jar"/>
			<target name="javadoc"/>
		</ant>

	</target>


	<!-- =================================================================== -->
	<!-- Build the jsbml modules                                             -->
	<!-- =================================================================== -->
	<target
	  name="module-dist"
	  description="Build the jsbml modules"
	  depends="init"
	>

		<mkdir dir="${dist.dir}/modules"/>

		<property file="${cellDesigner.module.base.dir}/celldesigner-build.properties"/>
		<property file="${libSBMLio.module.base.dir}/libSBMLio-build.properties"/>

		<!--
	    <echo message="Value read from celldesigner properties file = ${celldesigner.name}" />
		<echo message="Value read from celldesigner properties file = ${celldesigner.version}" />
	    <echo message="Value read from libSBMLio properties file = ${libSBMLio.name}" />
		-->

		<ant dir="${cellDesigner.module.base.dir}" inheritAll="false" inheritRefs="false">
			<target name="dist"/>
		</ant>

		<copy todir="${dist.dir}/modules/${celldesigner.name}-${celldesigner.version}">
			<fileset dir="${cellDesigner.module.base.dir}/dist/${celldesigner.name}-${celldesigner.version}" includes="*.jar"/>
		</copy>

		<ant dir="${libSBMLio.module.base.dir}" inheritAll="false" inheritRefs="true">
			<target name="dist" />
		</ant>

		<copy todir="${dist.dir}/modules/${libSBMLio.name}-${libSBMLio.version}">
			<fileset dir="${libSBMLio.module.base.dir}/dist/${libSBMLio.name}-${libSBMLio.version}"  includes="*.jar"/>
		</copy>

	</target>


	<!-- =================================================================== -->
	<!-- Cleans everything                                                   -->
	<!-- =================================================================== -->
	<target
	  name="clean"
	  description="Cleans everything"
	  depends="init"
	>
		<delete includeEmptyDirs="true" quiet="yes">
			<fileset dir="${build.dir}" includes="**/*"/>
		</delete>
		<delete dir="${dist.root}" includeEmptyDirs="true" quiet="yes"/>
	</target>

</project>

<!-- End of file -->
