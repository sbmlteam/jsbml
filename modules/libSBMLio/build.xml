<?xml version="1.0"?>
<!--

    This file is part of JSBML. Please visit http://sbml.org/Software/JSBML
    for the latest version of JSBML and more information about SBML.

    Copyright (C) 2009-2017 jointly by the following organizations:
    1. The University of Tuebingen, Germany
    2. EMBL European Bioinformatics Institute (EBML-EBI), Hinxton, UK
    3. The California Institute of Technology, Pasadena, CA, USA
    4. The University of California, San Diego, La Jolla, CA, USA
    5. The Babraham Institute, Cambridge, UK

    This library is free software; you can redistribute it and/or modify it
    under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation. A copy of the license agreement is provided
    in the file named "LICENSE.txt" included with this software distribution
    and also available online as http://sbml.org/Software/JSBML/License.

-->
<project default ="usage" basedir=".">
	
  <echo message="Determining the revision number of JSBML" />	
  <exec executable="svn" outputproperty="svninfo.xml"  resultproperty="svn.return.status" failifexecutionfails="false">
    <arg line="info --xml" />
  </exec>
  
  <!-- We consider it is a subversion checkout if the svninfo file contain the closing info tag --> 
  <condition property="svn.checkout">
		<and>
	    <contains string="${svninfo.xml}" substring="/info>"/>
			<isset property="svn.return.status"/>
		</and>
  </condition>
  
  <exec executable="git" outputproperty="git.commit.hash" resultproperty="git.return.status" failifexecutionfails="false">
    <arg line="log -1 --pretty=format:%H" />
  </exec>

  <!-- We consider it is a git clone if the property does not contain some error keywords and a return code is given (meaning the executable was found) --> 
  <condition property="git.clone">
		<and>
  		<not>
    		<contains string="${git.commit.hash}" substring="fatal"/>
  		</not>
			<isset property="git.return.status"/>
		</and>
  </condition>
	
	<!-- last property to check if neither svn or git were used and the sources were just downloaded as .zip or .tar.gz -->	
	<condition property="vcs.used">
		<or>
			<equals arg1="${git.clone}" arg2="true"/>
			<equals arg1="${svn.checkout}" arg2="true"/>
		</or>
	</condition>
	
  <tstamp>
    <format property="YEAR" pattern="yyyy" />
  </tstamp>
	
  <!-- =================================================================== -->
  <!-- Initialization target                                               -->
  <!-- =================================================================== -->
  <target
  	name="init"
  	description="Initialization target"
  >
  	<property file="${basedir}/libSBMLio-build.properties"/>  		
  		
    <property name="Name" value="${libSBMLio.Name}"/>
    <property name="name" value="${libSBMLio.name}"/>
    <property name="version" value="${libSBMLio.version}"/>

    <property name="year" value="${YEAR}"/>
  	
		<echo message="----------- ${Name} ${version} [${year}] ------------"/>
    <echo message="-----------     ${TODAY}   ------------"/>
    <echo message="-----------     ${DSTAMP} ${TSTAMP}  ------------"/>
  	
    <property environment="env"/>
    <property name="build.compiler" value="modern"/>
    <property name="build.sysclasspath" value="ignore"/>
    <property name="debug" value="on"/>
    <property name="optimize" value="off"/>
    <property name="deprecation" value="false"/>
    <property name="depend" value="true"/>
    <property name="verbose" value="false"/>
    
    <property name="build.number" value="${DSTAMP}-${TSTAMP}"/>
    <property name="build.name" value="${version} (build ${jsbml.revision}-${build.time})"/>

    <property name="src.dir" value="${basedir}/src"/>
  	<property name="test.src.dir" value="${basedir}/test"/>
    <property name="build.dir" value="${basedir}/build"/>
    <property name="build.src" value="${basedir}/build/src"/>
    <property name="build.dest" value="${basedir}/build/classes"/>
    <property name="build.javadocs" value="${basedir}/doc/api"/>
    <property name="jars.dir" value="${basedir}/lib"/>
    <property name="dist.root" value="${basedir}/dist"/>
    <property name="dist.dir" value="${dist.root}/${name}-${version}"/>
    <property name="package.dir" value="${basedir}/build/package"/>
  	
  	<property name="jsbml.build.dest" value="${basedir}/../../core/build"/>
  	<property name="jsbml.jars.dir" value="${basedir}/../../core/lib"/>

    <filter token="year" value="${year}"/>
    <filter token="version" value="${version}"/>
    <filter token="date" value="${TODAY}"/>
    <filter token="log" value="true"/>
    <filter token="verbose" value="true"/>

    <!-- add everything needed to the classpath -->
    <!-- adjust the settings to your local environment -->
    <path id="classpath">
      <fileset dir="${jars.dir}" includes="*.jar *.zip"/>
      <dirset dir="${jsbml.build.dest}" includes="classes"/>
      <fileset dir="${jsbml.jars.dir}" includes="*.jar *.zip"/>
     <!-- <path location="${basedir}/../../examples/build/classes"/> -->
    </path>
  </target>

  <!-- =================================================================== -->
  <!-- Help on usage                                                       -->
  <!-- =================================================================== -->
  <target name="usage" depends="init">
    <echo message=""/>
    <echo message=""/>
    <echo message="${Name} Build file"/>
    <echo message="-------------------------------------------------------------"/>
    <echo message=""/>
    <echo message=" available targets are:"/>
    <echo message=""/>
    <echo message="   compile  --> compiles the source code"/>
    <echo message="   jar      --> generates the ${name}.jar file"/>
    <echo message="   javadoc  --> generates the API documentation"/>
    <echo message="   clean    --> cleans up the directory"/>
    <echo message=""/>
    <echo message=" See the comments inside the build.xml file for more details."/>
    <echo message="-------------------------------------------------------------"/>
    <echo message=""/>
    <echo message=""/>
  </target>
  
	<!-- =================================================================== -->
	<!-- Creating the jsbml revision and url if it is an svn checkout        -->
	<!-- =================================================================== -->
	<target
	   name="svn.build.number"
	   description="Finds out the subversion build number"
	   if="svn.checkout" >

		<!-- <echo message="It seems to be an SVN checkout"/> -->
	  
	  <xmlproperty collapseAttributes="true">
	    <propertyresource name="svninfo.xml" />
	  </xmlproperty>
	  <property name="jsbml.revision" value="${info.entry.revision}" />
	  <property name="jsbml.url" value="${info.entry.url}" />
	</target>
	
	<!-- =================================================================== -->
	<!-- Creating the jsbml revision and url if it is a git clone            -->
	<!-- =================================================================== -->
	<target
	   name="git.build.number"
	   description="Finds out the git build number"
	   if="git.clone"
	   unless="svn.checkout"
	   >
		<!-- <echo message="It seems to be a git clone"/> -->
		
	  <exec executable="git" outputproperty="git.origin.url" failifexecutionfails="false">
	    <arg line="config --get remote.origin.url" />
	  </exec>

		<property name="jsbml.revision" value="${git.commit.hash}" />
		<property name="jsbml.url" value="${git.origin.url}" />
		
	</target>
	
	<!-- =================================================================== -->
	<!-- Creating the jsbml revision and url if it just an archive unpacked  -->
	<!-- =================================================================== -->
	<target
	   name="default.build.number"
	   description="Finds out the default build number"
	   unless="vcs.used">

		<!-- <echo message="Could not retrieve automatically the revision number from svn or git !"/> -->
		
	  <property name="jsbml.revision" value="build run on ${DSTAMP}" />
	  <property name="jsbml.url" value="no url provided" />
	  
	</target>
	
  <!-- =================================================================== -->
  <!-- Prepares the build directory                                        -->
  <!-- =================================================================== -->
  <target
  	name="prepare"
  	depends="init"
  	description="Prepares the build directory"
  >
    <mkdir dir="${build.dir}"/>
    <echo message="Done"/>
  </target>

  <!-- =================================================================== -->
  <!-- Prepares the source code                                            -->
  <!-- =================================================================== -->
  <target
    name="prepare-src"
  	depends="prepare"
  	description="Prepares the source code"
  >
    <!-- create directories -->
    <mkdir dir="${build.src}"/>
    <mkdir dir="${build.dest}"/>
  	<mkdir dir="${build.dest}/META-INF"/>
    <mkdir dir="${package.dir}"/>
<!--    <mkdir dir="${dist.root}"/>
    <mkdir dir="${dist.dir}"/> -->

    <!-- copy src files -->
    <copy todir="${build.src}" overwrite="yes">
        <fileset 
            dir="${src.dir}"
            excludes="**/.svn*, **/*.class, **/*~, **/*.tgz, **/*.zip ">
        </fileset>
    </copy>
  	
  	<copy todir="${build.src}" overwrite="yes">
  	        <fileset 
  	            dir="${test.src.dir}"
  	        	includes="org/sbml/jsbml/**"
  	            excludes="**/.svn*, **/*.class, **/*~, **/*.tgz, **/*.zip org/sbml/jsbml/xml/libsbml/SimpleApplication.java">
  	        </fileset>
  	    </copy>
  </target>


  <!-- =================================================================== -->
  <!-- Compiles the source directory                                       -->
  <!-- =================================================================== -->
  <target
	name="compile"
  	depends="prepare-src"
  	description="Compiles the source directory"
  >   
    <javac srcdir="${build.src}" encoding="UTF-8"
           destdir="${build.dest}"
           debug="${debug}"
           optimize="${optimize}"
           verbose="${verbose}"
           source="1.5"
           target="1.5"
           classpathref="classpath">
    </javac>

  	<property name="api.version" value="1.0-beta"/>
  	<property name="vendor" value="The JSBML Team"/>
  		
    <manifest file="${build.dest}/META-INF/MANIFEST.MF">
      <attribute name="Bundle-Name"            value="${Name}"/>
      <attribute name="Built-By"               value="${user.name}"/>
      <attribute name="Built-Date"             value="${TODAY}"/>
      <attribute name="Bundle-Version"         value="${version}"/>
      <attribute name="Bundle-Revision" value="${jsbml.revision}"/>
      <attribute name="Bundle-Vendor"          value="${vendor}"/>
      <attribute name="Bundle-RequiredExecutionEnvironment" value="JavaSE-1.6"/>
			<attribute name="Created-By"          value="${vendor}"/>

			<section name="${Name}">
				<attribute name="Specification-Title" value="${Name}"/>
				<attribute name="Specification-Version" value="${api.version}"/>
				<attribute name="Specification-Vendor"   value="${vendor}"/>
				<attribute name="Implementation-Title" value="${Name}"/>
				<attribute name="Implementation-Version" value="${version}, Revision ${jsbml.revision} (Build ${DSTAMP}-${TSTAMP})"/>
				<attribute name="Implementation-Vendor"  value="${vendor}"/>
	      <attribute name="Implementation-URL" value="http://sbml.org/Software/JSBML/"/>

			</section>
		</manifest>

  </target>
  

  <!-- =================================================================== -->  
  <!-- Creates the class package                                           -->
  <!-- =================================================================== -->
  <target
	name="jar"
  	depends="compile"
  	description="Creates the class package"
  >
    <copy todir="${build.dest}">
        <fileset
            dir="${build.src}"
            includes="**/*.png **/*.gif **/*.xsd **/*.tmpl **/data/* **/*.xml **/*.cfg **/*.obo" > 
        </fileset>
    </copy>
    <jar
      jarfile="${build.dir}/${name}-${version}.jar"
      basedir="${build.dest}" manifest="${build.dest}/META-INF/MANIFEST.MF"
      index="true"
    />
  </target>

	<!-- =================================================================== -->
	<!-- Creates the source jar package                                      -->
	<!-- =================================================================== -->
	<target
	  name="jar-src"
	  depends="prepare-src"
	  description="Creates the source jar package"
	>
		<jar
		  jarfile="${build.dir}/${name}-${version}-src.jar"
		  basedir="${build.src}" includes="**/*.java"
		  manifest="${build.dest}/META-INF/MANIFEST.MF"
		  index="true"
		/>

	</target>

	<!-- =================================================================== -->
	<!-- Creates the distribution                                            -->
	<!-- =================================================================== -->
	<target
	  name="dist"
	  depends="prepare-src"
	  description="Creates the distribution"
	>		
		<mkdir dir="${dist.root}"/>
		<mkdir dir="${dist.dir}"/>

		<!-- Creates the standard jar file -->

		<antcall target="clean"/>

		<antcall target="jar"/>
		<antcall target="jar-src"/>
		<copy todir="${dist.dir}" file="${build.dir}/${name}-${version}-src.jar"/>

		<copy todir="${dist.dir}" file="${build.dir}/${name}-${version}.jar"/>
		<copy todir="${dist.root}" file="${build.dir}/${name}-${version}.jar"/>


		<!-- Creates and copy the generated javadoc -->
		<antcall target="jar-javadoc"/>

		<copy todir="${dist.dir}/doc/api">
			<fileset dir="${build.javadocs}/" includes="**/*">
			</fileset>
		</copy>
		<copy todir="${dist.dir}" file="${build.dir}/${name}-${version}-javadoc.jar"/>

		<!-- Copy the source files -->
		<copy todir="${dist.dir}/src">
			<fileset dir="${build.src}/" includes="**/*">
			</fileset>
		</copy>

		<!-- Copy all the dependencies jar files -->
		<copy todir="${dist.dir}/lib">
			<fileset dir="${jars.dir}/" includes="*.jar" excludes="jsbml*.jar">
			</fileset>
		</copy>


		<copy todir="${dist.dir}">
			<fileset dir="${basedir}/" includes="LICENSE.txt NEWS.txt README AUTHORS.txt build.xml">
			</fileset>
		</copy>
		<copy todir="${dist.dir}/licenses">
			<fileset dir="${basedir}/licenses" includes="**/*">
			</fileset>
		</copy>

		<copy todir="${dist.dir}/doc">
			<fileset dir="${basedir}/doc" includes="**/*.pdf **/*.jpg **/*.java">

			</fileset>
		</copy>

		<!-- Creates the archives to be distributed -->
		<zip basedir="${dist.root}" destfile="${dist.root}/${name}-${version}.zip" includes="${name}-${version}/**"/>

		<!-- Not generating a tar.gz a having only a zip file should be enough -->
		<!-- <tar basedir="${dist.root}" destfile="${dist.root}/${name}-${version}.tar.gz" includes="${name}-${version}/**" compression="gzip"/> -->

	</target>


  <!-- =================================================================== -->
  <!-- Creates the API documentation                                       -->
  <!-- =================================================================== -->
  <target
  	name="javadoc"
  	depends="prepare-src"
  	description="Creates the API documentation"
  >  	
    <mkdir dir="${build.javadocs}"/>
    <javadoc packagenames="org.*"
             excludepackagenames="org.sbml.jsbml.test.*"
             sourcepath="${build.src}"
             destdir="${build.javadocs}"
             classpathref="classpath"
             maxmemory="96m"
             author="true"
             version="true"
             use="true"
             splitindex="true"
             noindex="false"
             windowtitle="${Name} ${version} API"
             doctitle="${Name} ${version} API"
    	     breakiterator="yes"
    >
		<link href="http://java.sun.com/j2se/1.5.0/docs/api"/>
		<link href="http://sbml.org/Special/Software/JSBML/build/apidocs/index.html"/>
   </javadoc> 	
  </target>

	<!-- =================================================================== -->
	<!-- Creates the javadocs jar package                                      -->
	<!-- =================================================================== -->
	<target
	  name="jar-javadoc"
	  depends="javadoc"
	  description="Creates the javadocs jar package"
	>
		<jar
		  jarfile="${build.dir}/${name}-${version}-javadoc.jar"
		  basedir="${build.javadocs}"
		  manifest="${build.dest}/META-INF/MANIFEST.MF"
		  index="true"
		/>
	</target>

  <!-- =================================================================== -->
  <!-- Cleans everything                                                   -->
  <!-- =================================================================== -->
  <target
  	name="clean"
  	depends="init"
  	description="Cleans everything"
  >
  	<delete includeEmptyDirs="true" quiet="yes">
       <fileset dir="${build.dir}" includes="**/*"/>
    </delete>
  	<delete dir="${dist.root}" includeEmptyDirs="true" quiet="yes"/>
  </target>

</project>

<!-- End of file -->
